{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useMemo as $1OoTj$useMemo, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar tmp = Symbol.iterator;\n\nvar $05ca4cd7c4a5a999$export$863faf230ee2118a = function () {\n  function $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes) {\n    var _this = this;\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        expandedKeys = _ref.expandedKeys;\n\n    _classCallCheck(this, $05ca4cd7c4a5a999$export$863faf230ee2118a);\n\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    var visit = function visit(node) {\n      _this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (var _iterator = _createForOfIteratorHelperLoose(node.childNodes), _step; !(_step = _iterator()).done;) {\n          var child = _step.value;\n          visit(child);\n        }\n      }\n    };\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(nodes), _step2; !(_step2 = _iterator2()).done;) {\n      var node2 = _step2.value;\n      visit(node2);\n    }\n\n    var last;\n    var index = 0;\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(this.keyMap), _step3; !(_step3 = _iterator3()).done;) {\n      var _ref2 = _step3.value;\n\n      var _ref3 = _slicedToArray(_ref2, 2);\n\n      var key = _ref3[0];\n      var node1 = _ref3[1];\n\n      if (last) {\n        last.nextKey = key;\n        node1.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node1.prevKey = undefined;\n      }\n\n      if (node1.type === 'item') node1.index = index++;\n      last = node1;\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n\n  _createClass($05ca4cd7c4a5a999$export$863faf230ee2118a, [{\n    key: tmp,\n    value: _regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.iterable, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keyMap.size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      return this.firstKey;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      return this.lastKey;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $05ca4cd7c4a5a999$export$863faf230ee2118a;\n}();\n\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  var _$1OoTj$useControlled = $1OoTj$useControlledState(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange),\n      _$1OoTj$useControlled2 = _slicedToArray(_$1OoTj$useControlled, 2),\n      expandedKeys = _$1OoTj$useControlled2[0],\n      setExpandedKeys = _$1OoTj$useControlled2[1];\n\n  var selectionState = $1OoTj$useMultipleSelectionState(props);\n  var disabledKeys = $1OoTj$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var tree = $1OoTj$useCollection(props, function (nodes) {\n    return new $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes, {\n      expandedKeys: expandedKeys\n    });\n  }, null, [expandedKeys]);\n  $1OoTj$useEffect(function () {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new $1OoTj$SelectionManager(tree, selectionState)\n  };\n}\n\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  var res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\n\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState };","map":{"version":3,"sources":["packages/@react-stately/tree/src/useTreeState.ts","packages/@react-stately/tree/src/TreeCollection.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionBase, Expandable, MultipleSelection, Node} from '@react-types/shared';\nimport {Key, useEffect, useMemo} from 'react';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, nodes => new TreeCollection(nodes, {expandedKeys}), null, [expandedKeys]);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Node} from '@react-types/shared';\nimport {Key} from 'react';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}