{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection } from \"@react-stately/collections\";\nimport $1BfjW$react, { useRef as $1BfjW$useRef, useState as $1BfjW$useState, useCallback as $1BfjW$useCallback, useMemo as $1BfjW$useMemo } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\n\nfunction $30561577df230a30$export$f61abf052f87399f(widths) {\n  return Array.from(widths).map(function (e) {\n    return e[1];\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  }, 0);\n}\n\nfunction $30561577df230a30$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nfunction $30561577df230a30$var$parseFractionalUnit(width) {\n  if (!width) return 1;\n  var match = width.match(/^(\\d+)(?=fr$)/);\n\n  if (!match) {\n    console.warn(\"width: \" + width + \" is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')\", 'defaulting to \\'1fr\\'');\n    return 1;\n  }\n\n  return parseInt(match[0], 10);\n}\n\nfunction $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === 'string') {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error('Only percentages or numbers are supported for static column widths');\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n\n  return width;\n}\n\nfunction $30561577df230a30$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Infinity;\n}\n\nfunction $30561577df230a30$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $30561577df230a30$export$7bbad27896f7ae9f(minWidth, tableWidth) : 75;\n}\n\nfunction $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, column) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column, index) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var delta = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth) - targetWidth, targetWidth - $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth));\n    return _objectSpread(_objectSpread({}, column), {}, {\n      index: index,\n      delta: delta\n    });\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$var$findDynamicColumnWidths(dynamicColumns, availableSpace, tableWidth) {\n  var fractions = dynamicColumns.reduce(function (sum, col) {\n    return sum + $30561577df230a30$var$parseFractionalUnit(col.props.defaultWidth);\n  }, 0);\n  var columns = dynamicColumns.map(function (column) {\n    var targetWidth = $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth) * availableSpace / fractions;\n    var width = Math.max($30561577df230a30$export$f556054ce4358701(column.props.minWidth, tableWidth), Math.min(Math.floor(targetWidth), $30561577df230a30$export$59185c62a7544aa0(column.props.maxWidth, tableWidth)));\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= $30561577df230a30$var$parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n  return columns;\n}\n\nfunction $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, availableSpace, tableWidth) {\n  var columns = $30561577df230a30$var$mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return b.delta - a.delta;\n  });\n  columns = $30561577df230a30$var$findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  return columns;\n}\n\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n      _props$tableWidth = props.tableWidth,\n      defaultTableWidth = _props$tableWidth === void 0 ? null : _props$tableWidth;\n  var columns1 = state.columns;\n  var columnsRef = $1BfjW$useRef([]);\n  var tableWidth = $1BfjW$useRef(defaultTableWidth);\n  var isResizing = $1BfjW$useRef(null);\n  var startResizeContentWidth = $1BfjW$useRef();\n\n  var _$1BfjW$useState = $1BfjW$useState(new Map(columns1.map(function (col) {\n    return [col.key, 0];\n  }))),\n      _$1BfjW$useState2 = _slicedToArray(_$1BfjW$useState, 2),\n      columnWidths = _$1BfjW$useState2[0],\n      setColumnWidths = _$1BfjW$useState2[1];\n\n  var columnWidthsRef = $1BfjW$useRef(columnWidths);\n  var affectedColumnWidthsRef = $1BfjW$useRef([]);\n\n  var _$1BfjW$useState3 = $1BfjW$useState(new Set()),\n      _$1BfjW$useState4 = _slicedToArray(_$1BfjW$useState3, 2),\n      resizedColumns = _$1BfjW$useState4[0],\n      setResizedColumns = _$1BfjW$useState4[1];\n\n  var resizedColumnsRef = $1BfjW$useRef(resizedColumns);\n\n  var _$1BfjW$useState5 = $1BfjW$useState(null),\n      _$1BfjW$useState6 = _slicedToArray(_$1BfjW$useState5, 2),\n      currentlyResizingColumn = _$1BfjW$useState6[0],\n      setCurrentlyResizingColumn = _$1BfjW$useState6[1];\n\n  function setColumnWidthsForRef(newWidths) {\n    columnWidthsRef.current = newWidths;\n    setColumnWidths(newWidths);\n  }\n\n  var getResolvedColumnWidth = $1BfjW$useCallback(function (column) {\n    var columnProps = column.props;\n\n    var _width, ref, ref1;\n\n    return (resizedColumns === null || resizedColumns === void 0 ? void 0 : resizedColumns.has(column.key)) ? columnWidthsRef.current.get(column.key) : (ref1 = (ref = (_width = columnProps.width) !== null && _width !== void 0 ? _width : columnProps.defaultWidth) !== null && ref !== void 0 ? ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(column.props)) !== null && ref1 !== void 0 ? ref1 : '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n  var getStaticAndDynamicColumns = $1BfjW$useCallback(function (columns) {\n    return columns.reduce(function (acc, column) {\n      var width = getResolvedColumnWidth(column);\n      return $30561577df230a30$export$1994a077b98ee0d5(width) ? _objectSpread(_objectSpread({}, acc), {}, {\n        staticColumns: [].concat(_toConsumableArray(acc.staticColumns), [column])\n      }) : _objectSpread(_objectSpread({}, acc), {}, {\n        dynamicColumns: [].concat(_toConsumableArray(acc.dynamicColumns), [column])\n      });\n    }, {\n      staticColumns: [],\n      dynamicColumns: []\n    });\n  }, [getResolvedColumnWidth]);\n  var buildColumnWidths = $1BfjW$useCallback(function (affectedColumns, availableSpace) {\n    var widths = new Map();\n    var remainingSpace = availableSpace;\n\n    var _getStaticAndDynamicC = getStaticAndDynamicColumns(affectedColumns),\n        staticColumns = _getStaticAndDynamicC.staticColumns,\n        dynamicColumns = _getStaticAndDynamicC.dynamicColumns;\n\n    staticColumns.forEach(function (column) {\n      var width = getResolvedColumnWidth(column);\n      var w = $30561577df230a30$export$7bbad27896f7ae9f(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n\n    if (dynamicColumns.length > 0) {\n      var newColumnWidths = $30561577df230a30$export$a870e6692ac5ccb2(dynamicColumns, remainingSpace, tableWidth.current);\n\n      for (var _iterator = _createForOfIteratorHelperLoose(newColumnWidths), _step; !(_step = _iterator()).done;) {\n        var column = _step.value;\n        widths.set(column.key, column.calculatedWidth);\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n  var prevColKeys = columnsRef.current.map(function (col) {\n    return col.key;\n  });\n  var colKeys = columns1.map(function (col) {\n    return col.key;\n  });\n\n  if (prevColKeys.length !== colKeys.length || !colKeys.every(function (col, i) {\n    return col === prevColKeys[i];\n  })) {\n    columnsRef.current = columns1;\n    var widths = buildColumnWidths(columns1, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n\n      if (!isResizing.current) {\n        var _widths = buildColumnWidths(columns1, width);\n\n        setColumnWidthsForRef(_widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = $30561577df230a30$export$f61abf052f87399f(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column, width) {\n    var widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n\n  function onColumnResizeEnd(column) {\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    props.onColumnResizeEnd && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    affectedColumnWidthsRef.current = [];\n    var widths = new Map(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column1, newWidth) {\n    var boundedWidth = Math.max($30561577df230a30$export$f556054ce4358701(column1.props.minWidth, tableWidth.current), Math.min(Math.floor(newWidth), $30561577df230a30$export$59185c62a7544aa0(column1.props.maxWidth, tableWidth.current)));\n    var widths = new Map(columnWidthsRef.current);\n    widths.set(column1.key, boundedWidth);\n    resizedColumnsRef.current.add(column1.key);\n    setResizedColumns(resizedColumnsRef.current);\n    var resizeIndex = columnsRef.current.findIndex(function (col) {\n      return col.key === column1.key;\n    });\n    var affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n\n    var _getStaticAndDynamicC2 = getStaticAndDynamicColumns(affectedColumns),\n        dynamicColumns = _getStaticAndDynamicC2.dynamicColumns;\n\n    var availableSpace = columnsRef.current.reduce(function (acc, column, index) {\n      if (index <= resizeIndex || $30561577df230a30$export$1994a077b98ee0d5(getResolvedColumnWidth(column))) return acc - widths.get(column.key);\n      return acc;\n    }, tableWidth.current);\n    var recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map([].concat(_toConsumableArray(widths), _toConsumableArray(recalculatedColumnWidths)));\n    setColumnWidthsForRef(widths);\n    var allAffectedColumns = [[column1.key, boundedWidth]].concat(_toConsumableArray(recalculatedColumnWidths)).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          width = _ref2[1];\n\n      return {\n        key: key,\n        width: width\n      };\n    });\n    return allAffectedColumns;\n  }\n\n  var ref2;\n  var getColumnWidth = $1BfjW$useCallback(function (key) {\n    return (ref2 = columnWidthsRef.current.get(key)) !== null && ref2 !== void 0 ? ref2 : 0;\n  }, [columnWidthsRef.current]);\n  var getColumnMinWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$f556054ce4358701(columns1[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns1]);\n  var getColumnMaxWidth = $1BfjW$useCallback(function (key) {\n    var columnIndex = columns1.findIndex(function (col) {\n      return col.key === key;\n    });\n    if (columnIndex === -1) return;\n    return $30561577df230a30$export$59185c62a7544aa0(columns1[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns1]);\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth: setTableWidth,\n    onColumnResize: onColumnResize,\n    onColumnResizeStart: onColumnResizeStart,\n    onColumnResizeEnd: onColumnResizeEnd,\n    getColumnWidth: getColumnWidth,\n    getColumnMinWidth: getColumnMinWidth,\n    getColumnMaxWidth: getColumnMaxWidth,\n    currentlyResizingColumn: currentlyResizingColumn\n  };\n}\n\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction $788781baa30117fa$var$buildHeaderRows(keyMap, columnNodes) {\n  var columns = [];\n  var seen = new Map();\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(columnNodes), _step2; !(_step2 = _iterator2()).done;) {\n    var column = _step2.value;\n    var parentKey = column.parentKey;\n    var col = [column];\n\n    while (parentKey) {\n      var parent = keyMap.get(parentKey);\n\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        var _seen$get = seen.get(parent),\n            _column = _seen$get.column,\n            index = _seen$get.index;\n\n        if (index > col.length) break;\n\n        for (var _i3 = index; _i3 < col.length; _i3++) {\n          _column.splice(_i3, 0, null);\n        }\n\n        for (var i1 = col.length; i1 < _column.length; i1++) {\n          if (_column[i1] && seen.has(_column[i1])) seen.get(_column[i1]).index = i1;\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  });\n  var colIndex = 0;\n\n  for (var _i2 = 0, _columns = columns; _i2 < _columns.length; _i2++) {\n    var column1 = _columns[_i2];\n\n    var _i = maxLength - 1;\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(column1), _step3; !(_step3 = _iterator3()).done;) {\n      var item = _step3.value;\n\n      if (item) {\n        var row = headerRows[_i];\n        var rowLength = row.reduce(function (p, c) {\n          return p + c.colspan;\n        }, 0);\n\n        if (rowLength < colIndex) {\n          var placeholder = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: _i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = _i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      _i--;\n    }\n\n    colIndex++;\n  }\n\n  var i = 0;\n\n  for (var _iterator4 = _createForOfIteratorHelperLoose(headerRows), _step4; !(_step4 = _iterator4()).done;) {\n    var row1 = _step4.value;\n\n    var _rowLength = row1.reduce(function (p, c) {\n      return p + c.colspan;\n    }, 0);\n\n    if (_rowLength < columnNodes.length) {\n      var _placeholder = {\n        type: 'placeholder',\n        key: 'placeholder-' + row1[row1.length - 1].key,\n        colspan: columnNodes.length - _rowLength,\n        index: _rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row1[row1.length - 1].key\n      };\n      row1.push(_placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\n\nvar tmp = Symbol.iterator;\n\nvar $788781baa30117fa$export$596e1b2e2cf93690 = function (_$1BfjW$GridCollectio) {\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _$1BfjW$GridCollectio);\n\n  var _super = _createSuper($788781baa30117fa$export$596e1b2e2cf93690);\n\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this;\n\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = [];\n\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: 'column',\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n\n    var rows = [];\n    var columnKeyMap = new Map();\n\n    var visit = function visit(node) {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n\n        case 'column':\n          columnKeyMap.set(node.key, node);\n\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n\n          break;\n\n        case 'item':\n          rows.push(node);\n          return;\n      }\n\n      for (var _iterator5 = _createForOfIteratorHelperLoose(node.childNodes), _step5; !(_step5 = _iterator5()).done;) {\n        var child = _step5.value;\n        visit(child);\n      }\n    };\n\n    for (var _iterator6 = _createForOfIteratorHelperLoose(nodes), _step6; !(_step6 = _iterator6()).done;) {\n      var node1 = _step6.value;\n      visit(node1);\n    }\n\n    var headerRows = $788781baa30117fa$var$buildHeaderRows(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this = _super.call(this, {\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    _this.columns = columns;\n    _this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this.body = body;\n    _this.headerRows = headerRows;\n    if (_this.rowHeaderColumnKeys.size === 0) _this.rowHeaderColumnKeys.add(_this.columns[(opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) ? 1 : 0].key);\n    return _this;\n  }\n\n  _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: tmp,\n    value: _regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.body.childNodes, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.body.childNodes).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.body.childNodes)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n\n      var rows = _toConsumableArray(this.body.childNodes);\n\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $788781baa30117fa$export$596e1b2e2cf93690;\n}($1BfjW$GridCollection);\n\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending',\n  descending: 'ascending'\n};\n\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _$1BfjW$useState7 = $1BfjW$useState(false),\n      _$1BfjW$useState8 = _slicedToArray(_$1BfjW$useState7, 2),\n      isKeyboardNavigationDisabled = _$1BfjW$useState8[0],\n      setKeyboardNavigationDisabled = _$1BfjW$useState8[1];\n\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode;\n  var context = $1BfjW$useMemo(function () {\n    return {\n      showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, props.showSelectionCheckboxes, selectionMode]);\n  var collection = $1BfjW$useCollection(props, function (nodes, prev) {\n    return new $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, context);\n  }, context);\n\n  var _$1BfjW$useGridState = $1BfjW$useGridState(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  })),\n      disabledKeys = _$1BfjW$useGridState.disabledKeys,\n      selectionManager = _$1BfjW$useGridState.selectionManager;\n\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var ref;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((ref = props.sortDescriptor) === null || ref === void 0 ? void 0 : ref.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'\n      });\n    }\n  };\n}\n\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = _regeneratorRuntime.mark(function getCollectionNode(props) {\n  var children, columns, _iterator7, _step7, column, _columns2;\n\n  return _regeneratorRuntime.wrap(function getCollectionNode$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          children = props.children, columns = props.columns;\n\n          if (!(typeof children === 'function')) {\n            _context2.next = 13;\n            break;\n          }\n\n          if (columns) {\n            _context2.next = 4;\n            break;\n          }\n\n          throw new Error('props.children was a function but props.columns is missing');\n\n        case 4:\n          _iterator7 = _createForOfIteratorHelperLoose(columns);\n\n        case 5:\n          if ((_step7 = _iterator7()).done) {\n            _context2.next = 11;\n            break;\n          }\n\n          column = _step7.value;\n          _context2.next = 9;\n          return {\n            type: 'column',\n            value: column,\n            renderer: children\n          };\n\n        case 9:\n          _context2.next = 5;\n          break;\n\n        case 11:\n          _context2.next = 16;\n          break;\n\n        case 13:\n          _columns2 = [];\n          $1BfjW$react.Children.forEach(children, function (column) {\n            _columns2.push({\n              type: 'column',\n              element: column\n            });\n          });\n          return _context2.delegateYield(_columns2, \"t0\", 16);\n\n        case 16:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, getCollectionNode);\n});\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\n\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = _regeneratorRuntime.mark(function getCollectionNode(props) {\n  var children, items1;\n  return _regeneratorRuntime.wrap(function getCollectionNode$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          children = props.children, items1 = props.items;\n          _context4.next = 3;\n          return {\n            type: 'body',\n            hasChildNodes: true,\n            props: props,\n            childNodes: function childNodes() {\n              return _regeneratorRuntime.mark(function _callee() {\n                var _iterator8, _step8, item, items;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        if (!(typeof children === 'function')) {\n                          _context3.next = 12;\n                          break;\n                        }\n\n                        if (items1) {\n                          _context3.next = 3;\n                          break;\n                        }\n\n                        throw new Error('props.children was a function but props.items is missing');\n\n                      case 3:\n                        _iterator8 = _createForOfIteratorHelperLoose(items1);\n\n                      case 4:\n                        if ((_step8 = _iterator8()).done) {\n                          _context3.next = 10;\n                          break;\n                        }\n\n                        item = _step8.value;\n                        _context3.next = 8;\n                        return {\n                          type: 'item',\n                          value: item,\n                          renderer: children\n                        };\n\n                      case 8:\n                        _context3.next = 4;\n                        break;\n\n                      case 10:\n                        _context3.next = 15;\n                        break;\n\n                      case 12:\n                        items = [];\n                        $1BfjW$react.Children.forEach(children, function (item) {\n                          items.push({\n                            type: 'item',\n                            element: item\n                          });\n                        });\n                        return _context3.delegateYield(items, \"t0\", 15);\n\n                      case 15:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee);\n              })();\n            }\n          };\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, getCollectionNode);\n});\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\n\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n\n$1cd244557c2f97d5$var$Column.getCollectionNode = _regeneratorRuntime.mark(function getCollectionNode(props, context1) {\n  var title, children, childColumns1, rendered, textValue, fullNodes, updateContext;\n  return _regeneratorRuntime.wrap(function getCollectionNode$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          title = props.title, children = props.children, childColumns1 = props.childColumns;\n          rendered = title || children;\n          textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n          _context6.next = 5;\n          return {\n            type: 'column',\n            hasChildNodes: !!childColumns1 || title && $1BfjW$react.Children.count(children) > 0,\n            rendered: rendered,\n            textValue: textValue,\n            props: props,\n            childNodes: function childNodes() {\n              return _regeneratorRuntime.mark(function _callee2() {\n                var _iterator9, _step9, child1, childColumns;\n\n                return _regeneratorRuntime.wrap(function _callee2$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        if (!childColumns1) {\n                          _context5.next = 10;\n                          break;\n                        }\n\n                        _iterator9 = _createForOfIteratorHelperLoose(childColumns1);\n\n                      case 2:\n                        if ((_step9 = _iterator9()).done) {\n                          _context5.next = 8;\n                          break;\n                        }\n\n                        child1 = _step9.value;\n                        _context5.next = 6;\n                        return {\n                          type: 'column',\n                          value: child1\n                        };\n\n                      case 6:\n                        _context5.next = 2;\n                        break;\n\n                      case 8:\n                        _context5.next = 14;\n                        break;\n\n                      case 10:\n                        if (!title) {\n                          _context5.next = 14;\n                          break;\n                        }\n\n                        childColumns = [];\n                        $1BfjW$react.Children.forEach(children, function (child) {\n                          childColumns.push({\n                            type: 'column',\n                            element: child\n                          });\n                        });\n                        return _context5.delegateYield(childColumns, \"t0\", 14);\n\n                      case 14:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee2);\n              })();\n            },\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              updateContext(newContext);\n              return false;\n            }\n          };\n\n        case 5:\n          fullNodes = _context6.sent;\n\n          updateContext = function updateContext(context) {\n            for (var _iterator10 = _createForOfIteratorHelperLoose(fullNodes), _step10; !(_step10 = _iterator10()).done;) {\n              var node = _step10.value;\n              if (!node.hasChildNodes) context.columns.push(node);\n            }\n          };\n\n          updateContext(context1);\n\n        case 8:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, getCollectionNode);\n});\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\n\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n\n$70d70eb16ea48428$var$Row.getCollectionNode = _regeneratorRuntime.mark(function getCollectionNode(props, context) {\n  var children, textValue;\n  return _regeneratorRuntime.wrap(function getCollectionNode$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          children = props.children, textValue = props.textValue;\n          _context8.next = 3;\n          return {\n            type: 'item',\n            props: props,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: true,\n            childNodes: function childNodes() {\n              return _regeneratorRuntime.mark(function _callee3() {\n                var _iterator11, _step11, column, cells;\n\n                return _regeneratorRuntime.wrap(function _callee3$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        if (!(context.showSelectionCheckboxes && context.selectionMode !== 'none')) {\n                          _context7.next = 3;\n                          break;\n                        }\n\n                        _context7.next = 3;\n                        return {\n                          type: 'cell',\n                          key: 'header',\n                          props: {\n                            isSelectionCell: true\n                          }\n                        };\n\n                      case 3:\n                        if (!(typeof children === 'function')) {\n                          _context7.next = 13;\n                          break;\n                        }\n\n                        _iterator11 = _createForOfIteratorHelperLoose(context.columns);\n\n                      case 5:\n                        if ((_step11 = _iterator11()).done) {\n                          _context7.next = 11;\n                          break;\n                        }\n\n                        column = _step11.value;\n                        _context7.next = 9;\n                        return {\n                          type: 'cell',\n                          element: children(column.key),\n                          key: column.key\n                        };\n\n                      case 9:\n                        _context7.next = 5;\n                        break;\n\n                      case 11:\n                        _context7.next = 18;\n                        break;\n\n                      case 13:\n                        cells = [];\n                        $1BfjW$react.Children.forEach(children, function (cell) {\n                          cells.push({\n                            type: 'cell',\n                            element: cell\n                          });\n                        });\n\n                        if (!(cells.length !== context.columns.length)) {\n                          _context7.next = 17;\n                          break;\n                        }\n\n                        throw new Error(\"Cell count must match column count. Found \" + cells.length + \" cells and \" + context.columns.length + \" columns.\");\n\n                      case 17:\n                        return _context7.delegateYield(cells, \"t0\", 18);\n\n                      case 18:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee3);\n              })();\n            },\n            shouldInvalidate: function shouldInvalidate(newContext) {\n              return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n                return c.key !== context.columns[i].key;\n              }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;\n            }\n          };\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, getCollectionNode);\n});\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n\n$941d1d9a6a28982a$var$Cell.getCollectionNode = _regeneratorRuntime.mark(function getCollectionNode(props) {\n  var children, textValue;\n  return _regeneratorRuntime.wrap(function getCollectionNode$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          children = props.children;\n          textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n          _context9.next = 4;\n          return {\n            type: 'cell',\n            props: props,\n            rendered: children,\n            textValue: textValue,\n            'aria-label': props['aria-label'],\n            hasChildNodes: false\n          };\n\n        case 4:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, getCollectionNode);\n});\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section };","map":{"version":3,"sources":["packages/@react-stately/table/src/useTableColumnResizeState.ts","packages/@react-stately/table/src/utils.ts","packages/@react-stately/table/src/useTableState.ts","packages/@react-stately/table/src/TableCollection.ts","packages/@react-stately/table/src/TableHeader.ts","packages/@react-stately/table/src/TableBody.ts","packages/@react-stately/table/src/Column.ts","packages/@react-stately/table/src/Row.ts","packages/@react-stately/table/src/Cell.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport {ColumnProps} from '@react-types/table';\nimport {getContentWidth, getDynamicColumnWidths, getMaxWidth, getMinWidth, isStatic, parseStaticWidth} from './utils';\nimport {GridNode} from '@react-types/grid';\nimport {Key, MutableRefObject, useCallback, useRef, useState} from 'react';\n\ninterface AffectedColumnWidth {\n  /** The column key. */\n  key: Key,\n  /** The column width. */\n  width: number\n}\ninterface AffectedColumnWidths extends Array<AffectedColumnWidth> {}\n\nexport interface TableColumnResizeState<T> {\n  /** A ref whose current value is the state of all the column widths. */\n  columnWidths: MutableRefObject<Map<Key, number>>,\n  /** Setter for the table width. */\n  setTableWidth: (width: number) => void,\n  /** Trigger a resize and recalculation. */\n  onColumnResize: (column: GridNode<T>, width: number) => void,\n  /** Callback for when onColumnResize has started. */\n  onColumnResizeStart: (column: GridNode<T>) => void,\n  /** Callback for when onColumnResize has ended. */\n  onColumnResizeEnd: (column: GridNode<T>) => void,\n  /** Getter for column width. */\n  getColumnWidth: (key: Key) => number,\n  /** Getter for column min width. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Getter for column max widths. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of column currently being resized. */\n  currentlyResizingColumn: Key | null\n}\n\nexport interface TableColumnResizeStateProps {\n  /** Callback to determine what the default width of a column should be. */\n  getDefaultWidth?: (props) => string | number,\n  /** Callback that is invoked during the entirety of the resize event. */\n  onColumnResize?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** Callback that is invoked when the resize event is ended. */\n  onColumnResizeEnd?: (affectedColumnWidths: AffectedColumnWidths) => void,\n  /** The default table width. */\n  tableWidth?: number\n}\n\ninterface ColumnState<T> {\n  columns: GridNode<T>[]\n}\n\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps, state: ColumnState<T>): TableColumnResizeState<T> {\n  const {getDefaultWidth, tableWidth: defaultTableWidth = null} = props;\n  const {columns} = state;\n  const columnsRef = useRef<GridNode<T>[]>([]);\n  const tableWidth = useRef<number>(defaultTableWidth);\n  const isResizing = useRef<boolean>(null);\n  const startResizeContentWidth = useRef<number>();\n\n  const [columnWidths, setColumnWidths] = useState<Map<Key, number>>(new Map(columns.map(col => [col.key, 0])));\n  const columnWidthsRef = useRef<Map<Key, number>>(columnWidths);\n  const affectedColumnWidthsRef = useRef<AffectedColumnWidths>([]);\n  const [resizedColumns, setResizedColumns] = useState<Set<Key>>(new Set());\n  const resizedColumnsRef = useRef<Set<Key>>(resizedColumns);\n\n  const [currentlyResizingColumn, setCurrentlyResizingColumn] = useState<Key>(null);\n\n  function setColumnWidthsForRef(newWidths: Map<Key, number>) {\n    columnWidthsRef.current = newWidths;\n    // new map so that change detection is triggered\n    setColumnWidths(newWidths);\n  }\n  /*\n    returns the resolved column width in this order:\n    previously calculated width -> controlled width prop -> uncontrolled defaultWidth prop -> dev assigned width -> default dynamic width\n  */\n  let getResolvedColumnWidth = useCallback((column: GridNode<T>): (number | string) => {\n    let columnProps = column.props as ColumnProps<T>;\n    return resizedColumns?.has(column.key) ? columnWidthsRef.current.get(column.key) : columnProps.width ?? columnProps.defaultWidth ?? getDefaultWidth?.(column.props) ?? '1fr';\n  }, [getDefaultWidth, resizedColumns]);\n\n  let getStaticAndDynamicColumns = useCallback((columns: GridNode<T>[]) : { staticColumns: GridNode<T>[], dynamicColumns: GridNode<T>[] } => columns.reduce((acc, column) => {\n    let width = getResolvedColumnWidth(column);\n    return isStatic(width) ? {...acc, staticColumns: [...acc.staticColumns, column]} : {...acc, dynamicColumns: [...acc.dynamicColumns, column]};\n  }, {staticColumns: [], dynamicColumns: []}), [getResolvedColumnWidth]);\n\n  let buildColumnWidths = useCallback((affectedColumns: GridNode<T>[], availableSpace: number): Map<Key, number> => {\n    const widths = new Map<Key, number>();\n    let remainingSpace = availableSpace;\n\n    const {staticColumns, dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    staticColumns.forEach(column => {\n      let width = getResolvedColumnWidth(column);\n      let w = parseStaticWidth(width, tableWidth.current);\n      widths.set(column.key, w);\n      remainingSpace -= w;\n    });\n\n    // dynamic columns\n    if (dynamicColumns.length > 0) {\n      const newColumnWidths = getDynamicColumnWidths(dynamicColumns, remainingSpace, tableWidth.current);\n      for (let column of newColumnWidths) {\n        widths.set(column.key, column.calculatedWidth);\n      }\n    }\n\n    return widths;\n  }, [getStaticAndDynamicColumns, getResolvedColumnWidth]);\n\n\n  const prevColKeys = columnsRef.current.map(col => col.key);\n  const colKeys = columns.map(col => col.key);\n  // if the columns change, need to rebuild widths.\n  if (prevColKeys.length !== colKeys.length || !colKeys.every((col, i) => col === prevColKeys[i])) {\n    columnsRef.current = columns;\n    const widths = buildColumnWidths(columns, tableWidth.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function setTableWidth(width: number) {\n    if (width && width !== tableWidth.current) {\n      tableWidth.current = width;\n      if (!isResizing.current) {\n        const widths = buildColumnWidths(columns, width);\n        setColumnWidthsForRef(widths);\n      }\n    }\n  }\n\n  function onColumnResizeStart(column: GridNode<T>) {\n    setCurrentlyResizingColumn(column.key);\n    isResizing.current = true;\n    startResizeContentWidth.current = getContentWidth(columnWidthsRef.current);\n  }\n\n  function onColumnResize(column: GridNode<T>, width: number) {\n    let widthsObj = resizeColumn(column, width);\n    affectedColumnWidthsRef.current = widthsObj;\n    props.onColumnResize && props.onColumnResize(affectedColumnWidthsRef.current);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  function onColumnResizeEnd(column: GridNode<T>) {\n    setCurrentlyResizingColumn(null);\n    isResizing.current = false;\n    props.onColumnResizeEnd && props.onColumnResizeEnd(affectedColumnWidthsRef.current);\n    affectedColumnWidthsRef.current = [];\n\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    setColumnWidthsForRef(widths);\n  }\n\n  function resizeColumn(column: GridNode<T>, newWidth: number) : AffectedColumnWidths {\n    let boundedWidth =  Math.max(\n      getMinWidth(column.props.minWidth, tableWidth.current),\n      Math.min(Math.floor(newWidth), getMaxWidth(column.props.maxWidth, tableWidth.current)));\n\n    // copy the columnWidths map and set the new width for the column being resized\n    let widths = new Map<Key, number>(columnWidthsRef.current);\n    widths.set(column.key, boundedWidth);\n\n    // keep track of all columns that have been sized\n    resizedColumnsRef.current.add(column.key);\n    setResizedColumns(resizedColumnsRef.current);\n\n    // get the columns affected by resize and remaining space\n    const resizeIndex = columnsRef.current.findIndex(col => col.key === column.key);\n    let affectedColumns = columnsRef.current.slice(resizeIndex + 1);\n\n    // we only care about the columns that CAN be resized, we ignore static columns.\n    let {dynamicColumns} = getStaticAndDynamicColumns(affectedColumns);\n\n    // available space for affected columns\n    let availableSpace = columnsRef.current.reduce((acc, column, index) => {\n      if (index <= resizeIndex || isStatic(getResolvedColumnWidth(column))) {\n        return acc - widths.get(column.key);\n      }\n      return acc;\n    }, tableWidth.current);\n\n    // merge the unaffected column widths and the recalculated column widths\n    let recalculatedColumnWidths = buildColumnWidths(dynamicColumns, availableSpace);\n    widths = new Map<Key, number>([...widths, ...recalculatedColumnWidths]);\n\n    setColumnWidthsForRef(widths);\n\n    /*\n     when getting recalculated columns above, the column being resized is not considered \"recalculated\"\n     so we need to add it to the list of affected columns\n    */\n    let allAffectedColumns = ([[column.key, boundedWidth], ...recalculatedColumnWidths] as [Key, number][]).map(([key, width]) => ({key, width}));\n    return allAffectedColumns;\n  }\n\n  // This function is regenerated whenever columnWidthsRef.current changes in order to get the new correct ref value.\n  let getColumnWidth = useCallback((key: Key): number => columnWidthsRef.current.get(key) ?? 0, [columnWidthsRef.current]);\n\n  let getColumnMinWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMinWidth(columns[columnIndex].props.minWidth, tableWidth.current);\n  }, [columns]);\n\n  let getColumnMaxWidth = useCallback((key: Key) => {\n    const columnIndex = columns.findIndex(col => col.key === key);\n    if (columnIndex === -1) {\n      return;\n    }\n    return getMaxWidth(columns[columnIndex].props.maxWidth, tableWidth.current);\n  }, [columns]);\n\n  return {\n    columnWidths: columnWidthsRef,\n    setTableWidth,\n    onColumnResize,\n    onColumnResizeStart,\n    onColumnResizeEnd,\n    getColumnWidth,\n    getColumnMinWidth,\n    getColumnMaxWidth,\n    currentlyResizingColumn\n  };\n}\n","import {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ntype mappedColumn<T> = GridNode<T> & {\n    index: number,\n    delta: number,\n    calculatedWidth?: number\n};\n\nexport function getContentWidth(widths: Map<Key, number>): number {\n  return Array.from(widths).map(e => e[1]).reduce((acc, cur) => acc + cur, 0);\n}\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n} \n\nfunction parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  } \n  let match = width.match(/^(\\d+)(?=fr$)/);\n      // if width is the incorrect format, just deafult it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, \n        'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseInt(match[0], 10);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseInt(match[0], 10) / 100);\n  }\n  return width;\n}\n    \n    \nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n        ? parseStaticWidth(maxWidth, tableWidth)\n        : Infinity;\n}\n\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n      ? parseStaticWidth(minWidth, tableWidth)\n      : 75;\n}\n\nfunction mapDynamicColumns<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n        (sum, column) => sum + parseFractionalUnit(column.props.defaultWidth),\n        0\n      );\n    \n  let columns = dynamicColumns.map((column, index) => {\n    const targetWidth =\n          (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    const delta = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth) - targetWidth,\n      targetWidth - getMaxWidth(column.props.maxWidth, tableWidth)\n    );\n\n    return {\n      ...column,\n      index,\n      delta \n    };\n  });\n    \n  return columns;\n}\n\nfunction findDynamicColumnWidths<T>(dynamicColumns: mappedColumn<T>[], availableSpace: number, tableWidth: number): mappedColumn<T>[] {\n  let fractions = dynamicColumns.reduce(\n    (sum, col) => sum + parseFractionalUnit(col.props.defaultWidth),\n    0\n  );\n\n  const columns = dynamicColumns.map((column) => {\n    const targetWidth =\n      (parseFractionalUnit(column.props.defaultWidth) * availableSpace) / fractions;\n    let width = Math.max(\n      getMinWidth(column.props.minWidth, tableWidth),\n      Math.min(Math.floor(targetWidth), getMaxWidth(column.props.maxWidth, tableWidth))\n    );\n    column.calculatedWidth = width;\n    availableSpace -= width;\n    fractions -= parseFractionalUnit(column.props.defaultWidth);\n    return column;\n  });\n\n  return columns;\n}  \n    \nexport function getDynamicColumnWidths<T>(dynamicColumns: GridNode<T>[], availableSpace: number, tableWidth: number) {\n  let columns = mapDynamicColumns(dynamicColumns, availableSpace, tableWidth);\n    \n  columns.sort((a, b) => b.delta - a.delta);\n  columns = findDynamicColumnWidths(columns, availableSpace, tableWidth);\n  columns.sort((a, b) => a.index - b.index);\n    \n  return columns;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key, useMemo, useState} from 'react';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends CollectionBase<T>, MultipleSelectionStateProps, Sortable {\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none'} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',\n    selectionMode,\n    columns: []\n  }), [props.children, props.showSelectionCheckboxes, selectionMode]);\n\n  let collection = useCollection<T, TableCollection<T>>(\n    props,\n    (nodes, prev) => new TableCollection(nodes, prev, context),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({...props, collection});\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from 'react';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\n\nfunction buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  let columns = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.index = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: TableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns = [];\n\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return [...this.body.childNodes].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.body.childNodes][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.body.childNodes];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row(props: RowProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        React.Children.forEach(children, cell => {\n          cells.push({\n            type: 'cell',\n            element: cell\n          });\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as (props: RowProps) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {PartialNode} from '@react-stately/collections';\nimport {ReactElement} from 'react';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n"]},"metadata":{},"sourceType":"module"}