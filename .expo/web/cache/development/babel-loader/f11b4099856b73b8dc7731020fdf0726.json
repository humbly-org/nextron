{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { mergeProps as $cE0pI$mergeProps, filterDOMProps as $cE0pI$filterDOMProps, chain as $cE0pI$chain } from \"@react-aria/utils\";\nimport { useFocusable as $cE0pI$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $cE0pI$usePress } from \"@react-aria/interactions\";\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  var _props$elementType = props.elementType,\n      elementType = _props$elementType === void 0 ? 'button' : _props$elementType,\n      isDisabled = props.isDisabled,\n      onPress = props.onPress,\n      onPressStart = props.onPressStart,\n      onPressEnd = props.onPressEnd,\n      onPressChange = props.onPressChange,\n      preventFocusOnPress = props.preventFocusOnPress,\n      allowFocusWhenDisabled = props.allowFocusWhenDisabled,\n      deprecatedOnClick = props.onClick,\n      href = props.href,\n      target = props.target,\n      rel = props.rel,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'button' : _props$type;\n  var additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === 'a' && isDisabled ? undefined : href,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n\n  var _$cE0pI$usePress = $cE0pI$usePress({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  }),\n      pressProps = _$cE0pI$usePress.pressProps,\n      isPressed = _$cE0pI$usePress.isPressed;\n\n  var _$cE0pI$useFocusable = $cE0pI$useFocusable(props, ref),\n      focusableProps = _$cE0pI$useFocusable.focusableProps;\n\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  var buttonProps = $cE0pI$mergeProps(focusableProps, pressProps, $cE0pI$filterDOMProps(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: function onClick(e) {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n\nfunction $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {\n  var isSelected = state.isSelected;\n\n  var _$701a24aa0da5b062$ex = $701a24aa0da5b062$export$ea18c227d4417cc3(_objectSpread(_objectSpread({}, props), {}, {\n    onPress: $cE0pI$chain(state.toggle, props.onPress)\n  }), ref),\n      isPressed = _$701a24aa0da5b062$ex.isPressed,\n      buttonProps = _$701a24aa0da5b062$ex.buttonProps;\n\n  return {\n    isPressed: isPressed,\n    buttonProps: $cE0pI$mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton, $55f54f7887471b58$export$51e84d46ca0bc451 as useToggleButton };","map":{"version":3,"sources":["packages/@react-aria/button/src/useButton.ts","packages/@react-aria/button/src/useToggleButton.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps} from '@react-aria/utils';\nimport {mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonProps<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonProps<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonProps<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonProps<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonProps<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonProps<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaToggleButtonProps} from '@react-types/button';\nimport {ButtonAria, useButton} from './useButton';\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport {ToggleState} from '@react-stately/toggle';\n\nexport function useToggleButton(props: AriaToggleButtonProps<'a'>, state: ToggleState, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'button'>, state: ToggleState, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'div'>, state: ToggleState, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'input'>, state: ToggleState, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<'span'>, state: ToggleState, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a toggle button component.\n * ToggleButtons allow users to toggle a selection on or off, for example switching between two states or modes.\n */\nexport function useToggleButton(props: AriaToggleButtonProps<ElementType>, state: ToggleState, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  const {isSelected} = state;\n  const {isPressed, buttonProps} = useButton({\n    ...props,\n    onPress: chain(state.toggle, props.onPress)\n  }, ref);\n\n  return {\n    isPressed,\n    buttonProps: mergeProps(buttonProps, {\n      'aria-pressed': isSelected\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}