{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useMemo as $cAn5f$useMemo, useEffect as $cAn5f$useEffect } from \"react\";\nimport { useMultipleSelectionState as $cAn5f$useMultipleSelectionState, SelectionManager as $cAn5f$SelectionManager } from \"@react-stately/selection\";\n\nfunction $62967d126f3aa823$export$4007ac09ff9c68ed(props) {\n  var collection = props.collection,\n      focusMode = props.focusMode;\n  var selectionState = $cAn5f$useMultipleSelectionState(props);\n  var disabledKeys = $cAn5f$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var setFocusedKey = selectionState.setFocusedKey;\n\n  selectionState.setFocusedKey = function (key, child) {\n    if (focusMode === 'cell' && key != null) {\n      var item = collection.getItem(key);\n\n      if ((item === null || item === void 0 ? void 0 : item.type) === 'item') {\n        var ref, ref1;\n\n        var children = _toConsumableArray(item.childNodes);\n\n        if (child === 'last') key = (ref = children[children.length - 1]) === null || ref === void 0 ? void 0 : ref.key;else key = (ref1 = children[0]) === null || ref1 === void 0 ? void 0 : ref1.key;\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  $cAn5f$useEffect(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [collection, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new $cAn5f$SelectionManager(collection, selectionState)\n  };\n}\n\nvar tmp = Symbol.iterator;\n\nvar $16805b1b18093c5f$export$de3fdf6493c353d = function () {\n  function $16805b1b18093c5f$export$de3fdf6493c353d(opts) {\n    var _this = this;\n\n    _classCallCheck(this, $16805b1b18093c5f$export$de3fdf6493c353d);\n\n    this.keyMap = new Map();\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n\n    var visit = function visit(node) {\n      var prevNode = _this.keyMap.get(node.key);\n\n      if (opts.visitNode) node = opts.visitNode(node);\n\n      _this.keyMap.set(node.key, node);\n\n      var childKeys = new Set();\n      var last;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(node.childNodes), _step; !(_step = _iterator()).done;) {\n        var child = _step.value;\n        if (child.type === 'cell' && child.parentKey == null) child.parentKey = node.key;\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else child.prevKey = null;\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) last.nextKey = null;\n\n      if (prevNode) {\n        for (var _iterator2 = _createForOfIteratorHelperLoose(prevNode.childNodes), _step2; !(_step2 = _iterator2()).done;) {\n          var _child = _step2.value;\n          if (!childKeys.has(_child.key)) remove(_child);\n        }\n      }\n    };\n\n    var remove = function remove(node) {\n      _this.keyMap.delete(node.key);\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(node.childNodes), _step3; !(_step3 = _iterator3()).done;) {\n        var child = _step3.value;\n        if (_this.keyMap.get(child.key) === child) remove(child);\n      }\n    };\n\n    var last1;\n    opts.items.forEach(function (node, i) {\n      var rowNode = _objectSpread(_objectSpread({\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: _toConsumableArray(node.childNodes),\n        rendered: undefined,\n        textValue: undefined\n      }, node), {}, {\n        index: i\n      });\n\n      if (last1) {\n        last1.nextKey = rowNode.key;\n        rowNode.prevKey = last1.key;\n      } else rowNode.prevKey = null;\n\n      _this.rows.push(rowNode);\n\n      visit(rowNode);\n      last1 = rowNode;\n    });\n    if (last1) last1.nextKey = null;\n  }\n\n  _createClass($16805b1b18093c5f$export$de3fdf6493c353d, [{\n    key: tmp,\n    value: _regeneratorRuntime.mark(function value() {\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(_toConsumableArray(this.rows), \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.rows).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var ref;\n      return (ref = _toConsumableArray(this.rows)[0]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var ref;\n\n      var rows = _toConsumableArray(this.rows);\n\n      return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n\n      return this.getItem(keys[idx]);\n    }\n  }]);\n\n  return $16805b1b18093c5f$export$de3fdf6493c353d;\n}();\n\nexport { $62967d126f3aa823$export$4007ac09ff9c68ed as useGridState, $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"sources":["packages/@react-stately/grid/src/useGridState.ts","packages/@react-stately/grid/src/GridCollection.ts"],"names":[],"mappings":"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","sourcesContent":["import {GridCollection} from '@react-types/grid';\nimport {Key, useEffect, useMemo} from 'react';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean\n}\n\nexport interface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = [...item.childNodes];\n        if (child === 'last') {\n          key = children[children.length - 1]?.key;\n        } else {\n          key = children[0]?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [collection, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: new SelectionManager(collection, selectionState)\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from 'react';\n\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node,\n        index: i\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}