{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = _regeneratorRuntime.mark($fc36f9a046a9ce79$export$cfc14088dfefce5f);\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { useState as $8D3nr$useState, useMemo as $8D3nr$useMemo, useEffect as $8D3nr$useEffect, useCallback as $8D3nr$useCallback } from \"react\";\nimport { useLayoutEffect as $8D3nr$useLayoutEffect } from \"@react-aria/utils\";\n\nvar $c74cda7d31af1253$export$c84671f46d6a1ca = function () {\n  function $c74cda7d31af1253$export$c84671f46d6a1ca() {\n    _classCallCheck(this, $c74cda7d31af1253$export$c84671f46d6a1ca);\n  }\n\n  _createClass($c74cda7d31af1253$export$c84671f46d6a1ca, [{\n    key: \"shouldInvalidate\",\n    value: function shouldInvalidate(newRect, oldRect) {\n      return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(invalidationContext) {}\n  }, {\n    key: \"getInitialLayoutInfo\",\n    value: function getInitialLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n  }, {\n    key: \"getFinalLayoutInfo\",\n    value: function getFinalLayoutInfo(layoutInfo) {\n      return layoutInfo;\n    }\n  }]);\n\n  return $c74cda7d31af1253$export$c84671f46d6a1ca;\n}();\n\nvar $d7fd61009c21d0bb$export$7e0eeb9da702a085 = function () {\n  function $d7fd61009c21d0bb$export$7e0eeb9da702a085(type, key, rect) {\n    _classCallCheck(this, $d7fd61009c21d0bb$export$7e0eeb9da702a085);\n\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  _createClass($d7fd61009c21d0bb$export$7e0eeb9da702a085, [{\n    key: \"copy\",\n    value: function copy() {\n      var res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n      res.estimatedSize = this.estimatedSize;\n      res.opacity = this.opacity;\n      res.transform = this.transform;\n      res.parentKey = this.parentKey;\n      res.isSticky = this.isSticky;\n      res.zIndex = this.zIndex;\n      res.allowOverflow = this.allowOverflow;\n      return res;\n    }\n  }]);\n\n  return $d7fd61009c21d0bb$export$7e0eeb9da702a085;\n}();\n\nvar $3041db3296945e6e$export$baf26146a414f24a = function () {\n  function $3041db3296945e6e$export$baf26146a414f24a() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, $3041db3296945e6e$export$baf26146a414f24a);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass($3041db3296945e6e$export$baf26146a414f24a, [{\n    key: \"copy\",\n    value: function copy() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n  }, {\n    key: \"isOrigin\",\n    value: function isOrigin() {\n      return this.x === 0 && this.y === 0;\n    }\n  }]);\n\n  return $3041db3296945e6e$export$baf26146a414f24a;\n}();\n\nvar $60423f92c7f9ad87$export$c79fc6492f3af13d = function () {\n  function $60423f92c7f9ad87$export$c79fc6492f3af13d() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    _classCallCheck(this, $60423f92c7f9ad87$export$c79fc6492f3af13d);\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass($60423f92c7f9ad87$export$c79fc6492f3af13d, [{\n    key: \"maxX\",\n    get: function get() {\n      return this.x + this.width;\n    }\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.height;\n    }\n  }, {\n    key: \"area\",\n    get: function get() {\n      return this.width * this.height;\n    }\n  }, {\n    key: \"topLeft\",\n    get: function get() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);\n    }\n  }, {\n    key: \"topRight\",\n    get: function get() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.y);\n    }\n  }, {\n    key: \"bottomLeft\",\n    get: function get() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.maxY);\n    }\n  }, {\n    key: \"bottomRight\",\n    get: function get() {\n      return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.maxY);\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(rect) {\n      return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n  }, {\n    key: \"containsRect\",\n    value: function containsRect(rect) {\n      return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n  }, {\n    key: \"containsPoint\",\n    value: function containsPoint(point) {\n      return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n  }, {\n    key: \"getCornerInRect\",\n    value: function getCornerInRect(rect) {\n      for (var _i = 0, _arr = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']; _i < _arr.length; _i++) {\n        var key = _arr[_i];\n        if (rect.containsPoint(this[key])) return key;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(rect) {\n      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n    }\n  }, {\n    key: \"pointEquals\",\n    value: function pointEquals(point) {\n      return this.x === point.x && this.y === point.y;\n    }\n  }, {\n    key: \"sizeEquals\",\n    value: function sizeEquals(size) {\n      return this.width === size.width && this.height === size.height;\n    }\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n    }\n  }]);\n\n  return $60423f92c7f9ad87$export$c79fc6492f3af13d;\n}();\n\nvar $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec = function () {\n  function $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec() {\n    var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    _classCallCheck(this, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec);\n\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass($ee1bfa90a957fb8a$export$cb6da89c6af1a8ec, [{\n    key: \"copy\",\n    value: function copy() {\n      return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this.width === other.width && this.height === other.height;\n    }\n  }]);\n\n  return $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec;\n}();\n\nvar $ad1d98aa8f0c31b4$var$KEY = 0;\n\nvar $ad1d98aa8f0c31b4$export$1a5223887c560441 = function () {\n  function $ad1d98aa8f0c31b4$export$1a5223887c560441(virtualizer) {\n    _classCallCheck(this, $ad1d98aa8f0c31b4$export$1a5223887c560441);\n\n    this.virtualizer = virtualizer;\n    this.key = ++$ad1d98aa8f0c31b4$var$KEY;\n  }\n\n  _createClass($ad1d98aa8f0c31b4$export$1a5223887c560441, [{\n    key: \"prepareForReuse\",\n    value: function prepareForReuse() {\n      this.content = null;\n      this.rendered = null;\n      this.layoutInfo = null;\n    }\n  }]);\n\n  return $ad1d98aa8f0c31b4$export$1a5223887c560441;\n}();\n\nvar $3eb131dcf37ad5f8$var$perf = typeof window !== 'undefined' ? window.performance : null;\nvar $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);\nvar $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\nvar $3eb131dcf37ad5f8$var$fixTs;\n\nfunction $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n  var canceled = false;\n  var raf_id;\n  var promise = new Promise(function (resolve) {\n    var start = $3eb131dcf37ad5f8$var$getTime();\n    var diffX = end.x - begin.x;\n    var diffY = end.y - begin.y;\n    raf_id = requestAnimationFrame(function run(t) {\n      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1000000000000 !== $3eb131dcf37ad5f8$var$getTime() > 1000000000000;\n      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime();\n      var delta = t - start;\n\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        var proceed = fn(new $3041db3296945e6e$export$baf26146a414f24a(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n      }\n    });\n  });\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\nfunction $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {\n  return t;\n}\n\nfunction $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n\nfunction $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {\n  var res = new Set();\n\n  for (var _iterator = _createForOfIteratorHelperLoose(a.keys()), _step; !(_step = _iterator()).done;) {\n    var key = _step.value;\n    if (!b.has(key)) res.add(key);\n  }\n\n  return res;\n}\n\nfunction $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {\n  var toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);\n  var toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);\n  var toUpdate = new Set();\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(a.keys()), _step2; !(_step2 = _iterator2()).done;) {\n    var key = _step2.value;\n    if (b.has(key)) toUpdate.add(key);\n  }\n\n  return {\n    toRemove: toRemove,\n    toAdd: toAdd,\n    toUpdate: toUpdate\n  };\n}\n\nfunction $fc36f9a046a9ce79$export$cfc14088dfefce5f() {\n  var _len,\n      iterators,\n      _key,\n      _i2,\n      _iterators,\n      iterator,\n      _args = arguments;\n\n  return _regeneratorRuntime.wrap(function $fc36f9a046a9ce79$export$cfc14088dfefce5f$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          for (_len = _args.length, iterators = new Array(_len), _key = 0; _key < _len; _key++) {\n            iterators[_key] = _args[_key];\n          }\n\n          _i2 = 0, _iterators = iterators;\n\n        case 2:\n          if (!(_i2 < _iterators.length)) {\n            _context.next = 8;\n            break;\n          }\n\n          iterator = _iterators[_i2];\n          return _context.delegateYield(iterator, \"t0\", 5);\n\n        case 5:\n          _i2++;\n          _context.next = 2;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {\n  var res = {};\n\n  for (var key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\nfunction $fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(a, b) {\n  if (a === b) return true;\n  if (a.size !== b.size) return false;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(a), _step3; !(_step3 = _iterator3()).done;) {\n    var key = _step3.value;\n    if (!b.has(key)) return false;\n  }\n\n  return true;\n}\n\nvar $364191b3decf3697$var$RollingAverage = function () {\n  function $364191b3decf3697$var$RollingAverage() {\n    _classCallCheck(this, $364191b3decf3697$var$RollingAverage);\n\n    this.count = 0;\n    this.value = 0;\n  }\n\n  _createClass($364191b3decf3697$var$RollingAverage, [{\n    key: \"addSample\",\n    value: function addSample(sample) {\n      this.count++;\n      this.value += (sample - this.value) / this.count;\n    }\n  }]);\n\n  return $364191b3decf3697$var$RollingAverage;\n}();\n\nvar $364191b3decf3697$export$4455ee6afb38dcbb = function () {\n  function $364191b3decf3697$export$4455ee6afb38dcbb() {\n    _classCallCheck(this, $364191b3decf3697$export$4455ee6afb38dcbb);\n\n    this.startTime = 0;\n    this.averagePerf = new $364191b3decf3697$var$RollingAverage();\n    this.averageTime = new $364191b3decf3697$var$RollingAverage();\n    this.velocity = new $3041db3296945e6e$export$baf26146a414f24a(5, 5);\n    this.overscanX = new $364191b3decf3697$var$RollingAverage();\n    this.overscanY = new $364191b3decf3697$var$RollingAverage();\n    this.visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();\n  }\n\n  _createClass($364191b3decf3697$export$4455ee6afb38dcbb, [{\n    key: \"setVisibleRect\",\n    value: function setVisibleRect(rect) {\n      var time = performance.now() - this.startTime;\n\n      if (time < 500) {\n        this.averageTime.addSample(time);\n        if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n        if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n\n      this.startTime = performance.now();\n      this.visibleRect = rect;\n    }\n  }, {\n    key: \"collectMetrics\",\n    value: function collectMetrics() {\n      var time = performance.now() - this.startTime;\n      if (time < 500) this.averagePerf.addSample(time);\n\n      if (this.visibleRect.height > 0) {\n        var o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n        this.overscanY.addSample(o);\n      }\n\n      if (this.visibleRect.width > 0) {\n        var _o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n\n        this.overscanX.addSample(_o);\n      }\n    }\n  }, {\n    key: \"getOverscannedRect\",\n    value: function getOverscannedRect() {\n      var overscanned = this.visibleRect.copy();\n      var overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n\n      if (this.velocity.y > 0) {\n        overscanned.y -= overscanY * 0.2;\n        overscanned.height += overscanY + overscanY * 0.2;\n      } else {\n        overscanned.y -= overscanY;\n        overscanned.height += overscanY + overscanY * 0.2;\n      }\n\n      var overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n\n      if (this.velocity.x > 0) {\n        overscanned.x -= overscanX * 0.2;\n        overscanned.width += overscanX + overscanX * 0.2;\n      } else {\n        overscanned.x -= overscanX;\n        overscanned.width += overscanX + overscanX * 0.2;\n      }\n\n      return overscanned;\n    }\n  }]);\n\n  return $364191b3decf3697$export$4455ee6afb38dcbb;\n}();\n\nvar $8e135e531d8dcb66$export$febc5573c75cefb0 = _createClass(function $8e135e531d8dcb66$export$febc5573c75cefb0() {\n  _classCallCheck(this, $8e135e531d8dcb66$export$febc5573c75cefb0);\n\n  this.level = 0;\n  this.actions = [];\n  this.animated = true;\n  this.initialMap = new Map();\n  this.finalMap = new Map();\n  this.initialLayoutInfo = new Map();\n  this.finalLayoutInfo = new Map();\n  this.removed = new Map();\n  this.toRemove = new Map();\n});\n\nvar $38b9490c1cca8fc4$export$89be5a243e59c4b2 = function () {\n  function $38b9490c1cca8fc4$export$89be5a243e59c4b2() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, $38b9490c1cca8fc4$export$89be5a243e59c4b2);\n\n    this._contentSize = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec();\n    this._visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new $364191b3decf3697$export$4455ee6afb38dcbb();\n    this._persistedKeys = new Set();\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    var _transitionDuration;\n\n    this.transitionDuration = (_transitionDuration = options.transitionDuration) !== null && _transitionDuration !== void 0 ? _transitionDuration : 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n\n    for (var _i3 = 0, _arr2 = ['delegate', 'size', 'layout', 'collection']; _i3 < _arr2.length; _i3++) {\n      var key = _arr2[_i3];\n      if (options[key]) this[key] = options[key];\n    }\n  }\n\n  _createClass($38b9490c1cca8fc4$export$89be5a243e59c4b2, [{\n    key: \"_setContentSize\",\n    value: function _setContentSize(size) {\n      this._contentSize = size;\n      this.delegate.setContentSize(size);\n    }\n  }, {\n    key: \"_setContentOffset\",\n    value: function _setContentOffset(offset) {\n      var rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n      this.delegate.setVisibleRect(rect);\n    }\n  }, {\n    key: \"contentSize\",\n    get: function get() {\n      return this._contentSize;\n    }\n  }, {\n    key: \"visibleRect\",\n    get: function get() {\n      return this._visibleRect;\n    },\n    set: function set(rect) {\n      this._setVisibleRect(rect);\n    }\n  }, {\n    key: \"_setVisibleRect\",\n    value: function _setVisibleRect(rect) {\n      var forceUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var current = this._visibleRect;\n      if (rect.equals(current)) return;\n      if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n      var shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n      this._resetAnimatedContentOffset();\n\n      this._visibleRect = rect;\n      if (shouldInvalidate) this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });else this.updateSubviews(forceUpdate);\n    }\n  }, {\n    key: \"collection\",\n    get: function get() {\n      return this._collection;\n    },\n    set: function set(data) {\n      this._setData(data);\n    }\n  }, {\n    key: \"_setData\",\n    value: function _setData(data) {\n      var _this = this;\n\n      if (data === this._collection) return;\n      if (this._collection) this._runTransaction(function () {\n        _this._collection = data;\n      }, this.transitionDuration > 0);else {\n        this._collection = data;\n        this.reloadData();\n      }\n    }\n  }, {\n    key: \"reloadData\",\n    value: function reloadData() {\n      this.relayout({\n        contentChanged: true\n      });\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this._collection ? this._collection.getItem(key) : null;\n    }\n  }, {\n    key: \"persistedKeys\",\n    get: function get() {\n      return this._persistedKeys;\n    },\n    set: function set(persistedKeys) {\n      if (!$fc36f9a046a9ce79$export$a8d0d0c8d1c5df64(persistedKeys, this._persistedKeys)) {\n        this._persistedKeys = persistedKeys;\n        this.updateSubviews();\n      }\n    }\n  }, {\n    key: \"isPersistedKey\",\n    value: function isPersistedKey(key) {\n      if (this._persistedKeys.has(key)) return true;\n\n      for (var _iterator4 = _createForOfIteratorHelperLoose(this._persistedKeys), _step4; !(_step4 = _iterator4()).done;) {\n        var k = _step4.value;\n\n        while (k != null) {\n          var layoutInfo = this.layout.getLayoutInfo(k);\n          if (!layoutInfo) break;\n          k = layoutInfo.parentKey;\n          if (k === key) return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"layout\",\n    get: function get() {\n      return this._layout;\n    },\n    set: function set(layout) {\n      this.setLayout(layout);\n    }\n  }, {\n    key: \"setLayout\",\n    value: function setLayout(layout) {\n      var _this2 = this;\n\n      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (layout === this._layout) return;\n\n      var applyLayout = function applyLayout() {\n        if (_this2._layout) _this2._layout.virtualizer = null;\n        layout.virtualizer = _this2;\n        _this2._layout = layout;\n      };\n\n      if (animated) this._runTransaction(applyLayout);else {\n        applyLayout();\n        this.relayout();\n      }\n    }\n  }, {\n    key: \"_getReuseType\",\n    value: function _getReuseType(layoutInfo, content) {\n      if (layoutInfo.type === 'item' && content) {\n        var type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n        var reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n        return {\n          type: type,\n          reuseType: reuseType\n        };\n      }\n\n      return {\n        type: layoutInfo.type,\n        reuseType: layoutInfo.type\n      };\n    }\n  }, {\n    key: \"getReusableView\",\n    value: function getReusableView(layoutInfo) {\n      var content = this.getItem(layoutInfo.key);\n\n      var _this$_getReuseType = this._getReuseType(layoutInfo, content),\n          reuseType = _this$_getReuseType.reuseType;\n\n      if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n      var reusable = this._reusableViews[reuseType];\n      var view = reusable.length > 0 ? reusable.pop() : new $ad1d98aa8f0c31b4$export$1a5223887c560441(this);\n      view.viewType = reuseType;\n\n      if (!this._animatedContentOffset.isOrigin()) {\n        layoutInfo = layoutInfo.copy();\n        layoutInfo.rect.x += this._animatedContentOffset.x;\n        layoutInfo.rect.y += this._animatedContentOffset.y;\n      }\n\n      view.layoutInfo = layoutInfo;\n\n      this._renderView(view);\n\n      return view;\n    }\n  }, {\n    key: \"_renderView\",\n    value: function _renderView(reusableView) {\n      var _reusableView$layoutI = reusableView.layoutInfo,\n          type = _reusableView$layoutI.type,\n          key = _reusableView$layoutI.key;\n      reusableView.content = this.getItem(key);\n      reusableView.rendered = this._renderContent(type, reusableView.content);\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent(type, content) {\n      var cached = this._renderedContent.get(content);\n\n      if (cached != null) return cached;\n      var rendered = this.delegate.renderView(type, content);\n      if (content) this._renderedContent.set(content, rendered);\n      return rendered;\n    }\n  }, {\n    key: \"visibleViews\",\n    get: function get() {\n      return Array.from(this._visibleViews.values());\n    }\n  }, {\n    key: \"getView\",\n    value: function getView(key) {\n      return this._visibleViews.get(key) || null;\n    }\n  }, {\n    key: \"getViewsOfType\",\n    value: function getViewsOfType(type) {\n      return this.visibleViews.filter(function (v) {\n        return v.layoutInfo && v.layoutInfo.type === type;\n      });\n    }\n  }, {\n    key: \"keyForView\",\n    value: function keyForView(view) {\n      if (view && view.layoutInfo) return view.layoutInfo.key;\n      return null;\n    }\n  }, {\n    key: \"keyAtPoint\",\n    value: function keyAtPoint(point) {\n      var rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(point.x, point.y, 1, 1);\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n      for (var _iterator5 = _createForOfIteratorHelperLoose(layoutInfos), _step5; !(_step5 = _iterator5()).done;) {\n        var layoutInfo = _step5.value;\n        if (layoutInfo.rect.intersects(rect)) return layoutInfo.key;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"willUnmount\",\n    value: function willUnmount() {\n      cancelAnimationFrame(this._relayoutRaf);\n    }\n  }, {\n    key: \"relayout\",\n    value: function relayout() {\n      var _this3 = this;\n\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') return;\n\n      if (this._invalidationContext) {\n        _extends(this._invalidationContext, context);\n\n        return;\n      }\n\n      this._invalidationContext = context;\n      this._relayoutRaf = requestAnimationFrame(function () {\n        _this3._relayoutRaf = null;\n\n        _this3.relayoutNow();\n      });\n    }\n  }, {\n    key: \"relayoutNow\",\n    value: function relayoutNow() {\n      var _this4 = this;\n\n      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._invalidationContext || {};\n\n      if (this._relayoutRaf) {\n        cancelAnimationFrame(this._relayoutRaf);\n        this._relayoutRaf = null;\n        context = _objectSpread(_objectSpread({}, this._invalidationContext), context);\n      }\n\n      this._invalidationContext = null;\n      if (!this.layout || !this._collection || this._scrollAnimation) return;\n\n      var scrollAnchor = this._getScrollAnchor();\n\n      if (typeof context.beforeLayout === 'function') context.beforeLayout();\n      this.layout.validate(context);\n\n      this._setContentSize(this.layout.getContentSize());\n\n      if (typeof context.afterLayout === 'function') context.afterLayout();\n      var visibleRect = this.getVisibleRect();\n\n      var restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n\n      var contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n      var contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n      contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n      contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n      var hasLayoutUpdates = false;\n\n      if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n        if (context.animated || !this._animatedContentOffset.isOrigin()) {\n          this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n          this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n          hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n        } else this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(contentOffsetX, contentOffsetY));\n      } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n\n      if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n\n      if (context.animated && hasLayoutUpdates) {\n        this._enableTransitions();\n\n        var done = function done() {\n          _this4._disableTransitions();\n\n          if (!_this4._animatedContentOffset.isOrigin()) {\n            var _this4$getVisibleRect = _this4.getVisibleRect(),\n                x = _this4$getVisibleRect.x,\n                y = _this4$getVisibleRect.y;\n\n            _this4._resetAnimatedContentOffset();\n\n            _this4._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(x, y));\n          }\n\n          if (typeof context.afterAnimation === 'function') context.afterAnimation();\n        };\n\n        setTimeout(done, this.transitionDuration + 100);\n        return;\n      } else if (typeof context.afterAnimation === 'function') context.afterAnimation();\n    }\n  }, {\n    key: \"_correctItemOrder\",\n    value: function _correctItemOrder() {\n      if (this._isScrolling || this._transaction) return;\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(this._visibleLayoutInfos.keys()), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n\n        var view = this._visibleViews.get(key);\n\n        this._children.delete(view);\n\n        this._children.add(view);\n      }\n    }\n  }, {\n    key: \"_enableTransitions\",\n    value: function _enableTransitions() {\n      this.delegate.beginAnimations();\n    }\n  }, {\n    key: \"_disableTransitions\",\n    value: function _disableTransitions() {\n      this.delegate.endAnimations();\n    }\n  }, {\n    key: \"_getScrollAnchor\",\n    value: function _getScrollAnchor() {\n      if (!this.anchorScrollPosition) return null;\n      var visibleRect = this.getVisibleRect();\n\n      if (this.delegate.getScrollAnchor) {\n        var key = this.delegate.getScrollAnchor(visibleRect);\n\n        if (key != null) {\n          var layoutInfo = this.layout.getLayoutInfo(key);\n          var corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n          if (corner) {\n            var _key2 = layoutInfo.key;\n            var offset = layoutInfo.rect[corner].y - visibleRect.y;\n            return {\n              key: _key2,\n              layoutInfo: layoutInfo,\n              corner: corner,\n              offset: offset\n            };\n          }\n        }\n      }\n\n      if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n      var cornerAnchor = null;\n\n      for (var _iterator7 = _createForOfIteratorHelperLoose(this._visibleViews), _step7; !(_step7 = _iterator7()).done;) {\n        var _ref = _step7.value;\n\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        var _key3 = _ref2[0];\n        var view = _ref2[1];\n        var _layoutInfo = view.layoutInfo;\n\n        if (_layoutInfo && _layoutInfo.rect.area > 0) {\n          var _corner = _layoutInfo.rect.getCornerInRect(visibleRect);\n\n          if (_corner) {\n            var _offset = _layoutInfo.rect[_corner].y - visibleRect.y;\n\n            if (!cornerAnchor || _offset < cornerAnchor.offset) cornerAnchor = {\n              key: _key3,\n              layoutInfo: _layoutInfo,\n              corner: _corner,\n              offset: _offset\n            };\n          }\n        }\n      }\n\n      return cornerAnchor;\n    }\n  }, {\n    key: \"_restoreScrollAnchor\",\n    value: function _restoreScrollAnchor(scrollAnchor, context) {\n      var contentOffset = this.getVisibleRect();\n\n      if (scrollAnchor) {\n        var ref;\n        var finalAnchor = ((ref = context.transaction) === null || ref === void 0 ? void 0 : ref.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n        if (finalAnchor) {\n          var adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n          contentOffset.y += adjustment;\n        }\n      }\n\n      return contentOffset;\n    }\n  }, {\n    key: \"getVisibleRect\",\n    value: function getVisibleRect() {\n      var v = this.visibleRect;\n      var x = v.x - this._animatedContentOffset.x;\n      var y = v.y - this._animatedContentOffset.y;\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, v.width, v.height);\n    }\n  }, {\n    key: \"getVisibleLayoutInfos\",\n    value: function getVisibleLayoutInfos() {\n      var rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n      this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n      return this._visibleLayoutInfos;\n    }\n  }, {\n    key: \"_getLayoutInfoMap\",\n    value: function _getLayoutInfoMap(rect) {\n      var copy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n      var map = new Map();\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(layoutInfos), _step8; !(_step8 = _iterator8()).done;) {\n        var layoutInfo = _step8.value;\n        if (copy) layoutInfo = layoutInfo.copy();\n        map.set(layoutInfo.key, layoutInfo);\n      }\n\n      return map;\n    }\n  }, {\n    key: \"updateSubviews\",\n    value: function updateSubviews() {\n      var _this5 = this;\n\n      var forceUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this._collection) return;\n      var visibleLayoutInfos = this.getVisibleLayoutInfos();\n      var currentlyVisible = this._visibleViews;\n      var toAdd, toRemove, toUpdate;\n\n      if (forceUpdate) {\n        toAdd = visibleLayoutInfos;\n        toRemove = currentlyVisible;\n        toUpdate = new Set();\n      } else {\n        var _$fc36f9a046a9ce79$ex = $fc36f9a046a9ce79$export$acaf96a27438246b(currentlyVisible, visibleLayoutInfos);\n\n        toAdd = _$fc36f9a046a9ce79$ex.toAdd;\n        toRemove = _$fc36f9a046a9ce79$ex.toRemove;\n        toUpdate = _$fc36f9a046a9ce79$ex.toUpdate;\n\n        for (var _iterator9 = _createForOfIteratorHelperLoose(toUpdate), _step9; !(_step9 = _iterator9()).done;) {\n          var key = _step9.value;\n          var view = currentlyVisible.get(key);\n          if (!view || !view.layoutInfo) continue;\n          var item = this.getItem(visibleLayoutInfos.get(key).key);\n          if (view.content === item) toUpdate.delete(key);else {\n            var _this$_getReuseType2 = this._getReuseType(view.layoutInfo, item),\n                reuseType = _this$_getReuseType2.reuseType;\n\n            if (view.viewType !== reuseType) {\n              toUpdate.delete(key);\n              toAdd.add(key);\n              toRemove.add(key);\n            }\n          }\n        }\n\n        if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n          if (this._transaction) this._applyLayoutInfos();\n          return;\n        }\n      }\n\n      var removed = new Set();\n\n      for (var _iterator10 = _createForOfIteratorHelperLoose(toRemove.keys()), _step10; !(_step10 = _iterator10()).done;) {\n        var _key4 = _step10.value;\n\n        var _view = this._visibleViews.get(_key4);\n\n        if (_view) {\n          removed.add(_view);\n\n          this._visibleViews.delete(_key4);\n\n          if (this._transaction) this._transaction.toRemove.set(_key4, _view);else this.reuseView(_view);\n        }\n      }\n\n      for (var _iterator11 = _createForOfIteratorHelperLoose(toAdd.keys()), _step11; !(_step11 = _iterator11()).done;) {\n        var key1 = _step11.value;\n        var layoutInfo = visibleLayoutInfos.get(key1);\n\n        var _view2 = void 0;\n\n        if (this._transaction) {\n          if (this._transaction.initialLayoutInfo.has(key1)) layoutInfo = this._transaction.initialLayoutInfo.get(key1);\n          _view2 = this._transaction.toRemove.get(key1);\n\n          if (_view2) {\n            this._transaction.toRemove.delete(key1);\n\n            this._applyLayoutInfo(_view2, layoutInfo);\n          }\n        }\n\n        if (!_view2) {\n          _view2 = this.getReusableView(layoutInfo);\n          if (!removed.has(_view2)) this._children.add(_view2);\n        }\n\n        this._visibleViews.set(key1, _view2);\n\n        removed.delete(_view2);\n      }\n\n      for (var _iterator12 = _createForOfIteratorHelperLoose(toUpdate), _step12; !(_step12 = _iterator12()).done;) {\n        var key2 = _step12.value;\n\n        var _view3 = currentlyVisible.get(key2);\n\n        this._renderedContent.delete(key2);\n\n        this._renderView(_view3);\n      }\n\n      if (!this._transaction) this.removeViews(removed);\n\n      this._correctItemOrder();\n\n      this._flushVisibleViews();\n\n      var hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n\n      if (hasLayoutUpdates) requestAnimationFrame(function () {\n        if (_this5._transaction) requestAnimationFrame(function () {\n          return _this5._applyLayoutInfos();\n        });\n      });\n      return hasLayoutUpdates;\n    }\n  }, {\n    key: \"afterRender\",\n    value: function afterRender() {\n      if (this.shouldOverscan) this._overscanManager.collectMetrics();\n    }\n  }, {\n    key: \"_flushVisibleViews\",\n    value: function _flushVisibleViews() {\n      var _this6 = this;\n\n      var viewsByParentKey = new Map([[null, []]]);\n\n      for (var _iterator13 = _createForOfIteratorHelperLoose(this._children), _step13; !(_step13 = _iterator13()).done;) {\n        var view1 = _step13.value;\n        if (!viewsByParentKey.has(view1.layoutInfo.parentKey)) viewsByParentKey.set(view1.layoutInfo.parentKey, []);\n        viewsByParentKey.get(view1.layoutInfo.parentKey).push(view1);\n        if (!viewsByParentKey.has(view1.layoutInfo.key)) viewsByParentKey.set(view1.layoutInfo.key, []);\n      }\n\n      var buildTree = function buildTree(parent, views) {\n        return views.map(function (view) {\n          var children = viewsByParentKey.get(view.layoutInfo.key);\n          return _this6.delegate.renderWrapper(parent, view, children, function (childViews) {\n            return buildTree(view, childViews);\n          });\n        });\n      };\n\n      var children1 = buildTree(null, viewsByParentKey.get(null));\n      this.delegate.setVisibleViews(children1);\n    }\n  }, {\n    key: \"_applyLayoutInfo\",\n    value: function _applyLayoutInfo(view, layoutInfo) {\n      if (view.layoutInfo === layoutInfo) return false;\n      view.layoutInfo = layoutInfo;\n      return true;\n    }\n  }, {\n    key: \"_applyLayoutInfos\",\n    value: function _applyLayoutInfos() {\n      var updated = false;\n\n      for (var _iterator14 = _createForOfIteratorHelperLoose(this._visibleViews.values()), _step14; !(_step14 = _iterator14()).done;) {\n        var view = _step14.value;\n        var cur = view.layoutInfo;\n\n        if (cur) {\n          var _layoutInfo3 = this.layout.getLayoutInfo(cur.key);\n\n          if (this._applyLayoutInfo(view, _layoutInfo3)) updated = true;\n        }\n      }\n\n      if (this._transaction) {\n        for (var _iterator15 = _createForOfIteratorHelperLoose(this._transaction.toRemove.values()), _step15; !(_step15 = _iterator15()).done;) {\n          var _view4 = _step15.value;\n          var _cur = _view4.layoutInfo;\n          var layoutInfo = this.layout.getLayoutInfo(_cur.key);\n          if (this._applyLayoutInfo(_view4, layoutInfo)) updated = true;\n        }\n\n        for (var _iterator16 = _createForOfIteratorHelperLoose(this._transaction.removed.values()), _step16; !(_step16 = _iterator16()).done;) {\n          var view2 = _step16.value;\n          var _cur2 = view2.layoutInfo;\n\n          var _layoutInfo2 = this._transaction.finalLayoutInfo.get(_cur2.key) || _cur2;\n\n          _layoutInfo2 = this.layout.getFinalLayoutInfo(_layoutInfo2.copy());\n          if (this._applyLayoutInfo(view2, _layoutInfo2)) updated = true;\n        }\n      }\n\n      if (updated) this._flushVisibleViews();\n    }\n  }, {\n    key: \"_hasLayoutUpdates\",\n    value: function _hasLayoutUpdates() {\n      if (!this._transaction) return false;\n\n      for (var _iterator17 = _createForOfIteratorHelperLoose(this._visibleViews.values()), _step17; !(_step17 = _iterator17()).done;) {\n        var view = _step17.value;\n        var cur = view.layoutInfo;\n        if (!cur) return true;\n        var layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (!cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"reuseView\",\n    value: function reuseView(view) {\n      view.prepareForReuse();\n\n      this._reusableViews[view.viewType].push(view);\n    }\n  }, {\n    key: \"removeViews\",\n    value: function removeViews(toRemove) {\n      for (var _iterator18 = _createForOfIteratorHelperLoose(toRemove), _step18; !(_step18 = _iterator18()).done;) {\n        var view = _step18.value;\n\n        this._children.delete(view);\n      }\n    }\n  }, {\n    key: \"updateItemSize\",\n    value: function updateItemSize(key, size) {\n      if (!this.layout.updateItemSize) return;\n\n      if (this._scrollAnimation) {\n        this._sizeUpdateQueue.set(key, size);\n\n        return;\n      }\n\n      var changed = this.layout.updateItemSize(key, size);\n      if (changed) this.relayout();\n    }\n  }, {\n    key: \"startScrolling\",\n    value: function startScrolling() {\n      this._isScrolling = true;\n    }\n  }, {\n    key: \"endScrolling\",\n    value: function endScrolling() {\n      this._isScrolling = false;\n\n      this._correctItemOrder();\n\n      this._flushVisibleViews();\n    }\n  }, {\n    key: \"_resetAnimatedContentOffset\",\n    value: function _resetAnimatedContentOffset() {\n      if (!this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);\n\n        this._applyLayoutInfos();\n      }\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(key, options) {\n      if (key == null) return;\n      var layoutInfo = this.layout.getLayoutInfo(key);\n      if (!layoutInfo) return;\n      var _options$duration = options.duration,\n          duration = _options$duration === void 0 ? 300 : _options$duration,\n          _options$shouldScroll = options.shouldScrollX,\n          shouldScrollX = _options$shouldScroll === void 0 ? true : _options$shouldScroll,\n          _options$shouldScroll2 = options.shouldScrollY,\n          shouldScrollY = _options$shouldScroll2 === void 0 ? true : _options$shouldScroll2,\n          _options$offsetX = options.offsetX,\n          offsetX = _options$offsetX === void 0 ? 0 : _options$offsetX,\n          _options$offsetY = options.offsetY,\n          offsetY = _options$offsetY === void 0 ? 0 : _options$offsetY;\n      var x = this.visibleRect.x;\n      var y = this.visibleRect.y;\n      var minX = layoutInfo.rect.x - offsetX;\n      var minY = layoutInfo.rect.y - offsetY;\n      var maxX = x + this.visibleRect.width;\n      var maxY = y + this.visibleRect.height;\n\n      if (shouldScrollX) {\n        if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n      }\n\n      if (shouldScrollY) {\n        if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n      }\n\n      return this.scrollTo(new $3041db3296945e6e$export$baf26146a414f24a(x, y), duration);\n    }\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(offset1) {\n      var _this7 = this;\n\n      var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n\n      if (this._scrollAnimation) {\n        this._scrollAnimation.cancel();\n\n        this._scrollAnimation = null;\n      }\n\n      if (duration <= 0 || this.visibleRect.pointEquals(offset1)) {\n        this._setContentOffset(offset1);\n\n        return Promise.resolve();\n      }\n\n      this.startScrolling();\n      this._scrollAnimation = $3eb131dcf37ad5f8$export$dc0b63720788090c(this.visibleRect, offset1, duration, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0, function (offset) {\n        _this7._setContentOffset(offset);\n      });\n\n      this._scrollAnimation.then(function () {\n        _this7._scrollAnimation = null;\n\n        for (var _iterator19 = _createForOfIteratorHelperLoose(_this7._sizeUpdateQueue), _step19; !(_step19 = _iterator19()).done;) {\n          var _ref3 = _step19.value;\n\n          var _ref4 = _slicedToArray(_ref3, 2);\n\n          var key = _ref4[0];\n          var size = _ref4[1];\n\n          _this7.updateItemSize(key, size);\n        }\n\n        _this7._sizeUpdateQueue.clear();\n\n        _this7.relayout();\n\n        _this7._processTransactionQueue();\n\n        _this7.endScrolling();\n      });\n\n      return this._scrollAnimation;\n    }\n  }, {\n    key: \"_runTransaction\",\n    value: function _runTransaction(action, animated) {\n      this._startTransaction();\n\n      if (this._nextTransaction) this._nextTransaction.actions.push(action);\n\n      this._endTransaction(animated);\n    }\n  }, {\n    key: \"_startTransaction\",\n    value: function _startTransaction() {\n      if (!this._nextTransaction) this._nextTransaction = new $8e135e531d8dcb66$export$febc5573c75cefb0();\n      this._nextTransaction.level++;\n    }\n  }, {\n    key: \"_endTransaction\",\n    value: function _endTransaction(animated) {\n      if (!this._nextTransaction) return false;\n      if (animated != null) this._nextTransaction.animated = animated;\n      if (--this._nextTransaction.level > 0) return false;\n\n      if (this._nextTransaction.actions.length === 0) {\n        this._nextTransaction = null;\n        return false;\n      }\n\n      if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n\n      this._transactionQueue.push(this._nextTransaction);\n\n      this._nextTransaction = null;\n\n      this._processTransactionQueue();\n\n      return true;\n    }\n  }, {\n    key: \"_processTransactionQueue\",\n    value: function _processTransactionQueue() {\n      if (this._transaction || this._scrollAnimation) return;\n\n      var next = this._transactionQueue.shift();\n\n      if (next) this._performTransaction(next);\n    }\n  }, {\n    key: \"_getContentRect\",\n    value: function _getContentRect() {\n      return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, this.contentSize.width, this.contentSize.height);\n    }\n  }, {\n    key: \"_performTransaction\",\n    value: function _performTransaction(transaction) {\n      var _this8 = this;\n\n      this._transaction = transaction;\n      this.relayoutNow({\n        transaction: transaction,\n        animated: transaction.animated,\n        beforeLayout: function beforeLayout() {\n          if (transaction.animated) transaction.initialMap = _this8._getLayoutInfoMap(_this8._getContentRect(), true);\n\n          for (var _iterator20 = _createForOfIteratorHelperLoose(transaction.actions), _step20; !(_step20 = _iterator20()).done;) {\n            var action = _step20.value;\n            action();\n          }\n        },\n        afterLayout: function afterLayout() {\n          if (transaction.animated) {\n            transaction.finalMap = _this8._getLayoutInfoMap(_this8._getContentRect());\n\n            _this8._setupTransactionAnimations(transaction);\n          } else _this8._transaction = null;\n        },\n        afterAnimation: function afterAnimation() {\n          if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n            for (var _iterator21 = _createForOfIteratorHelperLoose($fc36f9a046a9ce79$export$cfc14088dfefce5f(transaction.toRemove.values(), transaction.removed.values())), _step21; !(_step21 = _iterator21()).done;) {\n              var view = _step21.value;\n\n              _this8._children.delete(view);\n\n              _this8.reuseView(view);\n            }\n          }\n\n          _this8._transaction = null;\n\n          _this8._correctItemOrder();\n\n          _this8._flushVisibleViews();\n\n          _this8._processTransactionQueue();\n        }\n      });\n    }\n  }, {\n    key: \"_setupTransactionAnimations\",\n    value: function _setupTransactionAnimations(transaction) {\n      var initialMap = transaction.initialMap,\n          finalMap = transaction.finalMap;\n\n      for (var _iterator22 = _createForOfIteratorHelperLoose(initialMap), _step22; !(_step22 = _iterator22()).done;) {\n        var _ref5 = _step22.value;\n\n        var _ref6 = _slicedToArray(_ref5, 2);\n\n        var key = _ref6[0];\n        var layoutInfo = _ref6[1];\n        if (finalMap.has(key)) transaction.initialLayoutInfo.set(key, layoutInfo);else transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n\n      for (var _iterator23 = _createForOfIteratorHelperLoose(finalMap), _step23; !(_step23 = _iterator23()).done;) {\n        var _ref7 = _step23.value;\n\n        var _ref8 = _slicedToArray(_ref7, 2);\n\n        var key3 = _ref8[0];\n        var layoutInfo1 = _ref8[1];\n\n        if (!initialMap.has(key3)) {\n          var initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n          transaction.initialLayoutInfo.set(key3, initialLayoutInfo);\n        }\n      }\n\n      for (var _iterator24 = _createForOfIteratorHelperLoose(this._visibleViews), _step24; !(_step24 = _iterator24()).done;) {\n        var _ref9 = _step24.value;\n\n        var _ref10 = _slicedToArray(_ref9, 2);\n\n        var key4 = _ref10[0];\n        var view = _ref10[1];\n\n        if (!finalMap.has(key4) && view.layoutInfo.rect.width > 0) {\n          transaction.removed.set(key4, view);\n\n          this._visibleViews.delete(key4);\n\n          if (view.layoutInfo) {\n            if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }]);\n\n  return $38b9490c1cca8fc4$export$89be5a243e59c4b2;\n}();\n\nfunction $fc0b13b484ac1194$export$1505db82fe357e65(opts) {\n  var _$8D3nr$useState = $8D3nr$useState([]),\n      _$8D3nr$useState2 = _slicedToArray(_$8D3nr$useState, 2),\n      visibleViews = _$8D3nr$useState2[0],\n      setVisibleViews = _$8D3nr$useState2[1];\n\n  var _$8D3nr$useState3 = $8D3nr$useState(new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec()),\n      _$8D3nr$useState4 = _slicedToArray(_$8D3nr$useState3, 2),\n      contentSize = _$8D3nr$useState4[0],\n      setContentSize = _$8D3nr$useState4[1];\n\n  var _$8D3nr$useState5 = $8D3nr$useState(false),\n      _$8D3nr$useState6 = _slicedToArray(_$8D3nr$useState5, 2),\n      isAnimating = _$8D3nr$useState6[0],\n      setAnimating = _$8D3nr$useState6[1];\n\n  var _$8D3nr$useState7 = $8D3nr$useState(false),\n      _$8D3nr$useState8 = _slicedToArray(_$8D3nr$useState7, 2),\n      isScrolling = _$8D3nr$useState8[0],\n      setScrolling = _$8D3nr$useState8[1];\n\n  var virtualizer = $8D3nr$useMemo(function () {\n    return new $38b9490c1cca8fc4$export$89be5a243e59c4b2();\n  }, []);\n  virtualizer.delegate = {\n    setVisibleViews: setVisibleViews,\n    setVisibleRect: function setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize: setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: function beginAnimations() {\n      return setAnimating(true);\n    },\n    endAnimations: function endAnimations() {\n      return setAnimating(false);\n    },\n    getScrollAnchor: opts.getScrollAnchor\n  };\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n  $8D3nr$useLayoutEffect(function () {\n    virtualizer.afterRender();\n  });\n  $8D3nr$useEffect(function () {\n    return function () {\n      return virtualizer.willUnmount();\n    };\n  }, []);\n  return {\n    virtualizer: virtualizer,\n    visibleViews: visibleViews,\n    setVisibleRect: $8D3nr$useCallback(function (rect) {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize: contentSize,\n    isAnimating: isAnimating,\n    isScrolling: isScrolling,\n    startScrolling: $8D3nr$useCallback(function () {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: $8D3nr$useCallback(function () {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n\nexport { $c74cda7d31af1253$export$c84671f46d6a1ca as Layout, $d7fd61009c21d0bb$export$7e0eeb9da702a085 as LayoutInfo, $3041db3296945e6e$export$baf26146a414f24a as Point, $60423f92c7f9ad87$export$c79fc6492f3af13d as Rect, $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec as Size, $ad1d98aa8f0c31b4$export$1a5223887c560441 as ReusableView, $fc0b13b484ac1194$export$1505db82fe357e65 as useVirtualizerState };","map":{"version":3,"sources":["packages/@react-stately/virtualizer/src/Layout.ts","packages/@react-stately/virtualizer/src/LayoutInfo.ts","packages/@react-stately/virtualizer/src/Point.ts","packages/@react-stately/virtualizer/src/Rect.ts","packages/@react-stately/virtualizer/src/Size.ts","packages/@react-stately/virtualizer/src/ReusableView.ts","packages/@react-stately/virtualizer/src/useVirtualizerState.ts","packages/@react-stately/virtualizer/src/Virtualizer.ts","packages/@react-stately/virtualizer/src/tween.ts","packages/@react-stately/virtualizer/src/utils.ts","packages/@react-stately/virtualizer/src/OverscanManager.ts","packages/@react-stately/virtualizer/src/Transaction.ts"],"names":[],"mappings":";;;;;;;;;;;;uCS6CiB,yC;;;;;;;;;;;ITXK,wC;;;;;;;WAUpB,0BAAiB,OAAjB,EAAgC,OAAhC,EAAwD;MAEtD,OAAO,OAAO,CAAC,KAAR,KAAkB,OAAO,CAAC,KAA1B,IACA,OAAO,CAAC,MAAR,KAAmB,OAAO,CAAC,MADlC;IAED;;;WAQD,kBAAS,mBAAT,EAA2D,CAAE;;;WAsD7D,8BAAqB,UAArB,EAAyD;MACvD,OAAO,UAAP;IACD;;;WASD,4BAAmB,UAAnB,EAAuD;MACrD,OAAO,UAAP;IACD;;;;;;ICtGU,yC;EA0DR,mDACS,IADT,EACuB,GADvB,EACiC,IADjC,EAC6C;IAAA;;IAC9C,KAAK,IAAL,GAAY,IAAZ;IACA,KAAK,GAAL,GAAW,GAAX;IACA,KAAK,SAAL,GAAiB,IAAjB;IACA,KAAK,IAAL,GAAY,IAAZ;IACA,KAAK,aAAL,GAAqB,KAArB;IACA,KAAK,QAAL,GAAgB,KAAhB;IACA,KAAK,OAAL,GAAe,CAAf;IACA,KAAK,SAAL,GAAiB,IAAjB;IACA,KAAK,MAAL,GAAc,CAAd;IACA,KAAK,aAAL,GAAqB,KAArB;EACD;;;;WAKD,gBAAmB;MACjB,IAAI,GAAG,GAAG,IAAI,yCAAJ,CAAe,KAAK,IAApB,EAA0B,KAAK,GAA/B,EAAoC,KAAK,IAAL,CAAU,IAAV,EAApC,CAAV;MACA,GAAG,CAAC,aAAJ,GAAoB,KAAK,aAAzB;MACA,GAAG,CAAC,OAAJ,GAAc,KAAK,OAAnB;MACA,GAAG,CAAC,SAAJ,GAAgB,KAAK,SAArB;MACA,GAAG,CAAC,SAAJ,GAAgB,KAAK,SAArB;MACA,GAAG,CAAC,QAAJ,GAAe,KAAK,QAApB;MACA,GAAG,CAAC,MAAJ,GAAa,KAAK,MAAlB;MACA,GAAG,CAAC,aAAJ,GAAoB,KAAK,aAAzB;MACA,OAAO,GAAP;IACD;;;;;;IC9FU,yC;uDAOe;IAAA,IAAd,CAAc,uEAAV,CAAU;IAAA,IAAP,CAAO,uEAAH,CAAG;;IAAA;;IACxB,KAAK,CAAL,GAAS,CAAT;IACA,KAAK,CAAL,GAAS,CAAT;EACD;;;;WAKD,gBAAc;MACZ,OAAO,IAAI,yCAAJ,CAAU,KAAK,CAAf,EAAkB,KAAK,CAAvB,CAAP;IACD;;;WAKD,gBAAO,KAAP,EAA8B;MAC5B,OAAO,KAAK,CAAL,KAAW,KAAK,CAAC,CAAjB,IAAsB,KAAK,CAAL,KAAW,KAAK,CAAC,CAA9C;IACD;;;WAKD,oBAAoB;MAClB,OAAO,KAAK,CAAL,KAAW,CAAX,IAAgB,KAAK,CAAL,KAAW,CAAlC;IACD;;;;;;ICvBU,yC;uDAasC;IAAA,IAArC,CAAqC,uEAAjC,CAAiC;IAAA,IAA9B,CAA8B,uEAA1B,CAA0B;IAAA,IAAvB,KAAuB,uEAAf,CAAe;IAAA,IAAZ,MAAY,uEAAH,CAAG;;IAAA;;IAC/C,KAAK,CAAL,GAAS,CAAT;IACA,KAAK,CAAL,GAAS,CAAT;IACA,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,MAAL,GAAc,MAAd;EACD;;;;SAIE,eACgB;MACjB,OAAO,KAAK,CAAL,GAAS,KAAK,KAArB;IACD;;;SAIE,eACgB;MACjB,OAAO,KAAK,CAAL,GAAS,KAAK,MAArB;IACD;;;SAIE,eACgB;MACjB,OAAO,KAAK,KAAL,GAAa,KAAK,MAAzB;IACD;;;SAIE,eACkB;MACnB,OAAO,IAAI,yCAAJ,CAAU,KAAK,CAAf,EAAkB,KAAK,CAAvB,CAAP;IACD;;;SAIE,eACmB;MACpB,OAAO,IAAI,yCAAJ,CAAU,KAAK,IAAf,EAAqB,KAAK,CAA1B,CAAP;IACD;;;SAIE,eACqB;MACtB,OAAO,IAAI,yCAAJ,CAAU,KAAK,CAAf,EAAkB,KAAK,IAAvB,CAAP;IACD;;;SAIE,eACsB;MACvB,OAAO,IAAI,yCAAJ,CAAU,KAAK,IAAf,EAAqB,KAAK,IAA1B,CAAP;IACD;;;WAMD,oBAAW,IAAX,EAAgC;MAC9B,OAAO,KAAK,CAAL,IAAU,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,KAAxB,IACA,IAAI,CAAC,CAAL,IAAU,KAAK,CAAL,GAAS,KAAK,KADxB,IAEA,KAAK,CAAL,IAAU,IAAI,CAAC,CAAL,GAAS,IAAI,CAAC,MAFxB,IAGA,IAAI,CAAC,CAAL,IAAU,KAAK,CAAL,GAAS,KAAK,MAH/B;IAID;;;WAMD,sBAAa,IAAb,EAAkC;MAChC,OAAO,KAAK,CAAL,IAAU,IAAI,CAAC,CAAf,IACA,KAAK,CAAL,IAAU,IAAI,CAAC,CADf,IAEA,KAAK,IAAL,IAAa,IAAI,CAAC,IAFlB,IAGA,KAAK,IAAL,IAAa,IAAI,CAAC,IAHzB;IAID;;;WAMD,uBAAc,KAAd,EAAqC;MACnC,OAAO,KAAK,CAAL,IAAU,KAAK,CAAC,CAAhB,IACA,KAAK,CAAL,IAAU,KAAK,CAAC,CADhB,IAEA,KAAK,IAAL,IAAa,KAAK,CAAC,CAFnB,IAGA,KAAK,IAAL,IAAa,KAAK,CAAC,CAH1B;IAID;;;WAOD,yBAAgB,IAAhB,EAA+C;MAC7C,wBAAgB,CAAC,SAAD,EAAY,UAAZ,EAAwB,YAAxB,EAAsC,aAAtC,CAAhB,0BAAsE;QAAjE,IAAI,GAAG,WAAP;QACH,IAAI,IAAI,CAAC,aAAL,CAAmB,KAAK,GAAL,CAAnB,CAAJ,EACE,OAAO,GAAP;MAEH;;MAED,OAAO,IAAP;IACD;;;WAED,gBAAO,IAAP,EAAmB;MACjB,OAAO,IAAI,CAAC,CAAL,KAAW,KAAK,CAAhB,IACA,IAAI,CAAC,CAAL,KAAW,KAAK,CADhB,IAEA,IAAI,CAAC,KAAL,KAAe,KAAK,KAFpB,IAGA,IAAI,CAAC,MAAL,KAAgB,KAAK,MAH5B;IAID;;;WAED,qBAAY,KAAZ,EAAiC;MAC/B,OAAO,KAAK,CAAL,KAAW,KAAK,CAAC,CAAjB,IACA,KAAK,CAAL,KAAW,KAAK,CAAC,CADxB;IAED;;;WAED,oBAAW,IAAX,EAA8B;MAC5B,OAAO,KAAK,KAAL,KAAe,IAAI,CAAC,KAApB,IACA,KAAK,MAAL,KAAgB,IAAI,CAAC,MAD5B;IAED;;;WAKD,gBAAa;MACX,OAAO,IAAI,yCAAJ,CAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,KAAK,KAA9B,EAAqC,KAAK,MAA1C,CAAP;IACD;;;;;;ICnJU,yC;uDAIwB;IAAA,IAAvB,KAAuB,uEAAf,CAAe;IAAA,IAAZ,MAAY,uEAAH,CAAG;;IAAA;;IACjC,KAAK,KAAL,GAAa,KAAb;IACA,KAAK,MAAL,GAAc,MAAd;EACD;;;;WAKD,gBAAa;MACX,OAAO,IAAI,yCAAJ,CAAS,KAAK,KAAd,EAAqB,KAAK,MAA1B,CAAP;IACD;;;WAKD,gBAAO,KAAP,EAA6B;MAC3B,OAAO,KAAK,KAAL,KAAe,KAAK,CAAC,KAArB,IACA,KAAK,MAAL,KAAgB,KAAK,CAAC,MAD7B;IAED;;;;;;AClBH,IAAI,yBAAG,GAAG,CAAV;;IASa,yC;qDAeC,W,EAAyC;IAAA;;IACnD,KAAK,WAAL,GAAmB,WAAnB;IACA,KAAK,GAAL,GAAQ,EAAK,yBAAb;EACD;;;;WAKD,2BAAkB;MAChB,KAAK,OAAL,GAAe,IAAf;MACA,KAAK,QAAL,GAAgB,IAAhB;MACA,KAAK,UAAL,GAAkB,IAAlB;IACD;;;;;;AGrCH,IAAI,0BAAI,GAAG,OAAO,MAAP,KAAkB,WAAlB,GAAgC,MAAM,CAAC,WAAvC,GAAqD,IAAhE;AAEA,IAAI,6BAAO,GAAG,0BAAI,KAAK,0BAAI,CAAC,GAAL,IAAY,0BAAI,CAAC,SAAjB,IAA8B,0BAAI,CAAC,KAAnC,IAA4C,0BAAI,CAAC,MAAtD,CAAlB;AACA,IAAI,6BAAO,GAAG,6BAAO,GAAG,6BAAO,CAAC,IAAR,CAAa,0BAAb,CAAH,GAAwB,YAAY;EACvD,OAAO,IAAI,CAAC,GAAL,GAAW,IAAI,CAAC,GAAL,EAAX,GAAwB,IAAI,IAAJ,GAAW,OAAX,EAA/B;AACD,CAFD;AAIA,IAAI,2BAAJ;;SAMgB,yC,CAAM,K,EAAO,G,EAAK,Q,EAAU,I,EAAM,E,EAA6B;EAC7E,IAAI,QAAQ,GAAG,KAAf;EACA,IAAI,MAAJ;EAEA,IAAI,OAAO,GAAG,IAAI,OAAJ,CAAW,UAAC,OAAD,EAAY;IACnC,IAAI,KAAK,GAAG,6BAAO,EAAnB;IACA,IAAI,KAAK,GAAG,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAA1B;IACA,IAAI,KAAK,GAAG,GAAG,CAAC,CAAJ,GAAQ,KAAK,CAAC,CAA1B;IAEA,MAAM,GAAG,qBAAqB,CAAC,SAAS,GAAT,CAAa,CAAb,EAAgB;MAG7C,IAAI,2BAAK,IAAI,IAAb,EACE,2BAAK,GAAG,CAAC,GAAG,aAAJ,KAAa,6BAAO,KAAK,aAAjC;MAGF,IAAI,2BAAJ,EACE,CAAC,GAAG,6BAAO,EAAX;MAIF,IAAI,KAAK,GAAG,CAAC,GAAG,KAAhB;;MACA,IAAI,KAAK,GAAG,QAAZ,EAAsB;QACpB,EAAE,CAAC,GAAD,CAAF;QACA,OAAO;MACR,CAHD,MAGO;QAEL,IAAI,OAAO,GAAG,EAAE,CAAC,IAAI,yCAAJ,CACf,KAAK,CAAC,CAAN,GAAU,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,QAAT,CADP,EAEf,KAAK,CAAC,CAAN,GAAU,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,QAAT,CAFP,CAAD,CAAhB;QAKA,IAAI,OAAO,KAAK,KAAZ,IAAiB,CAAK,QAA1B,EACE,MAAM,GAAG,qBAAqB,CAAC,GAAD,CAA9B;MAEH;IACF,CA3B6B,CAA9B;EA4BD,CAjCa,CAAd;;EAmCA,OAAO,CAAC,MAAR,GAAiB,YAAY;IAC3B,QAAQ,GAAG,IAAX;IACA,oBAAoB,CAAC,MAAD,CAApB;EACD,CAHD;;EAKA,OAAO,OAAP;AACD;;SAGe,yC,CAAa,C,EAAG;EAC9B,OAAO,CAAP;AACD;;SAEe,yC,CAAQ,C,EAAG;EACzB,OAAO,IAAI,CAAC,GAAL,CAAS,CAAC,GAAG,IAAI,CAAC,EAAT,GAAc,CAAvB,CAAP;AACD;;SCtEe,yC,CAAW,C,EAAgB,C,EAAwB;EACjE,IAAI,GAAG,GAAG,IAAI,GAAJ,EAAV;;EAEA,qDAAgB,CAAC,CAAC,IAAF,EAAhB;IAAA,IAAS,GAAT;IACE,IAAE,CAAG,CAAC,CAAC,GAAF,CAAM,GAAN,CAAL,EACE,GAAG,CAAC,GAAJ,CAAQ,GAAR;EAFJ;;EAMA,OAAO,GAAP;AACD;;SAOe,yC,CAAc,C,EAAgB,C,EAAgB;EAC5D,IAAI,QAAQ,GAAG,yCAAO,CAAC,CAAD,EAAI,CAAJ,CAAtB;EACA,IAAI,KAAK,GAAG,yCAAO,CAAC,CAAD,EAAI,CAAJ,CAAnB;EACA,IAAI,QAAQ,GAAG,IAAI,GAAJ,EAAf;;EACA,sDAAgB,CAAC,CAAC,IAAF,EAAhB;IAAA,IAAS,GAAT;IACE,IAAI,CAAC,CAAC,GAAF,CAAM,GAAN,CAAJ,EACE,QAAQ,CAAC,GAAT,CAAa,GAAb;EAFJ;;EAKA,OAAO;cAAC,QAAD;WAAW,KAAX;cAAkB;EAAlB,CAAP;AACD;;SAMgB,yC;;;;;;;;;;;;;oCAAsB,S;YAAA,S;;;gCAChB,S;;;;;;;;UAAZ,Q;UAAqB,8BACrB,QADqB;;;;;;;;;;;;;;;SAShB,yC,CAAO,M,EAAQ;EAC7B,IAAI,GAAG,GAAG,EAAV;;EACA,KAAK,IAAI,GAAT,IAAgB,MAAhB;IACE,GAAG,CAAC,MAAM,CAAC,GAAD,CAAP,CAAH,GAAmB,GAAnB;EADF;;EAIA,OAAO,GAAP;AACD;;SAGe,yC,CAAc,C,EAAW,C,EAAoB;EAC3D,IAAI,CAAC,KAAK,CAAV,EACE,OAAO,IAAP;EAGF,IAAI,CAAC,CAAC,IAAF,KAAW,CAAC,CAAC,IAAjB,EACE,OAAO,KAAP;;EAGF,sDAAgB,CAAhB,2CAAmB;IAAA,IAAV,GAAU;IACjB,IAAE,CAAG,CAAC,CAAC,GAAF,CAAM,GAAN,CAAL,EACE,OAAO,KAAP;EAEH;;EAED,OAAO,IAAP;AACD;;IClEK,oC;;;;IAAN,KACU,KADV,GAC0B,CAD1B;IAAA,KAEE,KAFF,GAEkB,CAFlB;;;;;WAIE,mBAAU,MAAV,EAA0B;MACxB,KAAK,KAAL;MACA,KAAK,KAAL,IAAU,CAAK,MAAM,GAAG,KAAK,KAAnB,IAA4B,KAAK,KAA3C;IACD;;;;;;IAGU,yC;;;;IAAN,KACG,SADH,GACe,CADf;IAAA,KAEG,WAFH,GAEiB,IAAI,oCAAJ,EAFjB;IAAA,KAGG,WAHH,GAGiB,IAAI,oCAAJ,EAHjB;IAAA,KAIG,QAJH,GAIc,IAAI,yCAAJ,CAAU,CAAV,EAAa,CAAb,CAJd;IAAA,KAKG,SALH,GAKe,IAAI,oCAAJ,EALf;IAAA,KAMG,SANH,GAMe,IAAI,oCAAJ,EANf;IAAA,KAOG,WAPH,GAOiB,IAAI,yCAAJ,EAPjB;;;;;WASL,wBAAe,IAAf,EAA2B;MACzB,IAAI,IAAI,GAAG,WAAW,CAAC,GAAZ,KAAoB,KAAK,SAApC;;MACA,IAAI,IAAI,GAAG,GAAX,EAAgB;QACd,KAAK,WAAL,CAAiB,SAAjB,CAA2B,IAA3B;QAEA,IAAI,IAAI,CAAC,CAAL,KAAW,KAAK,WAAL,CAAiB,CAA5B,IAAiC,IAAI,GAAG,CAA5C,EACE,KAAK,QAAL,CAAc,CAAd,GAAe,CAAI,IAAI,CAAC,CAAL,GAAS,KAAK,WAAL,CAAiB,CAA9B,IAAmC,IAAlD;QAGF,IAAI,IAAI,CAAC,CAAL,KAAW,KAAK,WAAL,CAAiB,CAA5B,IAAiC,IAAI,GAAG,CAA5C,EACE,KAAK,QAAL,CAAc,CAAd,GAAe,CAAI,IAAI,CAAC,CAAL,GAAS,KAAK,WAAL,CAAiB,CAA9B,IAAmC,IAAlD;MAEH;;MAED,KAAK,SAAL,GAAiB,WAAW,CAAC,GAAZ,EAAjB;MACA,KAAK,WAAL,GAAmB,IAAnB;IACD;;;WAED,0BAAiB;MACf,IAAI,IAAI,GAAG,WAAW,CAAC,GAAZ,KAAoB,KAAK,SAApC;MACA,IAAI,IAAI,GAAG,GAAX,EACE,KAAK,WAAL,CAAiB,SAAjB,CAA2B,IAA3B;;MAGF,IAAI,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAA9B,EAAiC;QAC/B,IAAI,CAAC,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,WAAL,CAAiB,KAAjB,GAAyB,KAAK,WAAL,CAAiB,KAA7D,CAAT,CAAR;QACA,KAAK,SAAL,CAAe,SAAf,CAAyB,CAAzB;MACD;;MAED,IAAI,KAAK,WAAL,CAAiB,KAAjB,GAAyB,CAA7B,EAAgC;QAC9B,IAAI,EAAC,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,QAAL,CAAc,CAAd,IAAmB,KAAK,WAAL,CAAiB,KAAjB,GAAyB,KAAK,WAAL,CAAiB,KAA7D,CAAT,CAAR;;QACA,KAAK,SAAL,CAAe,SAAf,CAAyB,EAAzB;MACD;IACF;;;WAED,8BAAqB;MACnB,IAAI,WAAW,GAAG,KAAK,WAAL,CAAiB,IAAjB,EAAlB;MAEA,IAAI,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,KAAK,WAAL,CAAiB,MAAjB,GAA0B,CAAnC,EAAsC,KAAK,SAAL,CAAe,KAArD,IAA8D,GAAzE,IAAgF,GAAhG;;MACA,IAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAtB,EAAyB;QACvB,WAAW,CAAC,CAAZ,IAAiB,SAAS,GAAG,GAA7B;QACA,WAAW,CAAC,MAAZ,IAAsB,SAAS,GAAG,SAAS,GAAG,GAA9C;MACD,CAHD,MAGO;QACL,WAAW,CAAC,CAAZ,IAAiB,SAAjB;QACA,WAAW,CAAC,MAAZ,IAAsB,SAAS,GAAG,SAAS,GAAG,GAA9C;MACD;;MAED,IAAI,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,GAAL,CAAS,KAAK,WAAL,CAAiB,KAAjB,GAAyB,CAAlC,EAAqC,KAAK,SAAL,CAAe,KAApD,IAA6D,GAAxE,IAA+E,GAA/F;;MACA,IAAI,KAAK,QAAL,CAAc,CAAd,GAAkB,CAAtB,EAAyB;QACvB,WAAW,CAAC,CAAZ,IAAiB,SAAS,GAAG,GAA7B;QACA,WAAW,CAAC,KAAZ,IAAqB,SAAS,GAAG,SAAS,GAAG,GAA7C;MACD,CAHD,MAGO;QACL,WAAW,CAAC,CAAZ,IAAiB,SAAjB;QACA,WAAW,CAAC,KAAZ,IAAqB,SAAS,GAAG,SAAS,GAAG,GAA7C;MACD;;MAED,OAAO,WAAP;IACD;;;;;;IC1EU,yC;;;EAAN,KACL,KADK,GACG,CADH;EAAA,KAEL,OAFK,GAEqB,EAFrB;EAAA,KAGL,QAHK,GAGM,IAHN;EAAA,KAIL,UAJK,GAIuB,IAAI,GAAJ,EAJvB;EAAA,KAKL,QALK,GAKqB,IAAI,GAAJ,EALrB;EAAA,KAML,iBANK,GAM8B,IAAI,GAAJ,EAN9B;EAAA,KAOL,eAPK,GAO4B,IAAI,GAAJ,EAP5B;EAAA,KAQL,OARK,GAQmC,IAAI,GAAJ,EARnC;EAAA,KASL,QATK,GASoC,IAAI,GAAJ,EATpC;;;IJyCM,yC;uDA8C4C;IAAA,IAA3C,OAA2C,uEAAJ,EAAI;;IAAA;;IACrD,KAAK,YAAL,GAAoB,IAAI,yCAAJ,EAApB;IACA,KAAK,YAAL,GAAoB,IAAI,yCAAJ,EAApB;IAEA,KAAK,cAAL,GAAsB,EAAtB;IACA,KAAK,mBAAL,GAA2B,IAAI,GAAJ,EAA3B;IACA,KAAK,aAAL,GAAqB,IAAI,GAAJ,EAArB;IACA,KAAK,gBAAL,GAAwB,IAAI,OAAJ,EAAxB;IACA,KAAK,SAAL,GAAiB,IAAI,GAAJ,EAAjB;IACA,KAAK,oBAAL,GAA4B,IAA5B;IACA,KAAK,gBAAL,GAAwB,IAAI,yCAAJ,EAAxB;IACA,KAAK,cAAL,GAAsB,IAAI,GAAJ,EAAtB;IAEA,KAAK,gBAAL,GAAwB,IAAxB;IACA,KAAK,YAAL,GAAoB,KAApB;IACA,KAAK,gBAAL,GAAwB,IAAI,GAAJ,EAAxB;IACA,KAAK,sBAAL,GAA8B,IAAI,yCAAJ,CAAU,CAAV,EAAa,CAAb,CAA9B;IAEA,KAAK,YAAL,GAAoB,IAApB;IACA,KAAK,gBAAL,GAAwB,IAAxB;IACA,KAAK,iBAAL,GAAyB,EAAzB;;QAG0B,mB;;IAA1B,KAAK,kBAAL,GAAuB,CAAG,mBAA0B,GAA1B,OAAO,CAAC,kBAAX,MAA6B,IAA7B,IAAG,mBAA0B,KAAA,KAAA,CAA7B,GAAG,mBAAH,GAAiC,GAAxD;IACA,KAAK,oBAAL,GAA4B,OAAO,CAAC,oBAAR,IAAgC,KAA5D;IACA,KAAK,yBAAL,GAAiC,OAAO,CAAC,yBAAR,IAAqC,KAAtE;IACA,KAAK,cAAL,GAAsB,OAAO,CAAC,cAAR,KAA2B,KAAjD;;IACA,0BAAgB,CAAC,UAAD,EAAa,MAAb,EAAqB,QAArB,EAA+B,YAA/B,CAAhB;MAAK,IAAI,GAAG,aAAP;MACH,IAAI,OAAO,CAAC,GAAD,CAAX,EACE,KAAK,GAAL,IAAY,OAAO,CAAC,GAAD,CAAnB;IAFJ;EAKD;;;;WAED,yBAAgB,IAAhB,EAA4B;MAC1B,KAAK,YAAL,GAAoB,IAApB;MACA,KAAK,QAAL,CAAc,cAAd,CAA6B,IAA7B;IACD;;;WAED,2BAAkB,MAAlB,EAAiC;MAC/B,IAAI,IAAI,GAAG,IAAI,yCAAJ,CAAS,MAAM,CAAC,CAAhB,EAAmB,MAAM,CAAC,CAA1B,EAA6B,KAAK,YAAL,CAAkB,KAA/C,EAAsD,KAAK,YAAL,CAAkB,MAAxE,CAAX;MACA,KAAK,QAAL,CAAc,cAAd,CAA6B,IAA7B;IACD;;;SAIE,eACqB;MACtB,OAAO,KAAK,YAAZ;IACD;;;SAIE,eACqB;MACtB,OAAO,KAAK,YAAZ;IACD,C;SAIE,aACa,IADb,EACyB;MAC1B,KAAK,eAAL,CAAqB,IAArB;IACD;;;WAED,yBAAgB,IAAhB,EAAiD;MAAA,IAArB,WAAqB,uEAAP,KAAO;MAC/C,IAAI,OAAO,GAAG,KAAK,YAAnB;MAGA,IAAI,IAAI,CAAC,MAAL,CAAY,OAAZ,CAAJ,EACE;MAGF,IAAI,KAAK,cAAT,EACE,KAAK,gBAAL,CAAsB,cAAtB,CAAqC,IAArC;MAGF,IAAI,gBAAgB,GAAG,KAAK,MAAL,IAAe,KAAK,MAAL,CAAY,gBAAZ,CAA6B,IAA7B,EAAmC,KAAK,YAAxC,CAAtC;;MAEA,KAAK,2BAAL;;MACA,KAAK,YAAL,GAAoB,IAApB;MAEA,IAAI,gBAAJ,EACE,KAAK,QAAL,CAAc;QACZ,aAAa,EAAA,CAAG,IAAI,CAAC,WAAL,CAAiB,OAAjB,CADJ;QAEZ,WAAW,EAAA,CAAG,IAAI,CAAC,UAAL,CAAgB,OAAhB;MAFF,CAAd,EADF,KAME,KAAK,cAAL,CAAoB,WAApB;IAEH;;;SAEG,eAA4B;MAC9B,OAAO,KAAK,WAAZ;IACD,C;SAEG,aAAW,IAAX,EAAgC;MAClC,KAAK,QAAL,CAAc,IAAd;IACD;;;WAEO,kBAAS,IAAT,EAA8B;MAAA;;MACpC,IAAI,IAAI,KAAK,KAAK,WAAlB,EACE;MAGF,IAAI,KAAK,WAAT,EACE,KAAK,eAAL,CAAoB,YAAO;QACzB,KAAI,CAAC,WAAL,GAAmB,IAAnB;MACD,CAFD,EAEG,KAAK,kBAAL,GAA0B,CAF7B,EADF,KAIO;QACL,KAAK,WAAL,GAAmB,IAAnB;QACA,KAAK,UAAL;MACD;IACF;;;WAOD,sBAAa;MACX,KAAK,QAAL,CAAc;QACZ,cAAc,EAAE;MADJ,CAAd;IAGD;;;WAKD,iBAAQ,GAAR,EAAkB;MAChB,OAAO,KAAK,WAAL,GAAmB,KAAK,WAAL,CAAiB,OAAjB,CAAyB,GAAzB,CAAnB,GAAmD,IAA1D;IACD;;;SAE6F,eAChE;MAC5B,OAAO,KAAK,cAAZ;IACD,C;SAE6F,aAC5E,aAD4E,EACnD;MACzC,IAAE,CAAG,yCAAU,CAAC,aAAD,EAAgB,KAAK,cAArB,CAAf,EAAqD;QACnD,KAAK,cAAL,GAAsB,aAAtB;QACA,KAAK,cAAL;MACD;IACF;;;WAGD,wBAAe,GAAf,EAAyB;MAEvB,IAAI,KAAK,cAAL,CAAoB,GAApB,CAAwB,GAAxB,CAAJ,EACE,OAAO,IAAP;;MAIF,sDAAc,KAAK,cAAnB;QAAA,IAAS,CAAT;;QAAiC,OACxB,CAAC,IAAI,IADmB,EACb;UAChB,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,CAA1B,CAAjB;UACA,IAAE,CAAG,UAAL,EACE;UAGF,CAAC,GAAG,UAAU,CAAC,SAAf;UAEA,IAAI,CAAC,KAAK,GAAV,EACE,OAAO,IAAP;QAEH;MAZH;;MAeA,OAAO,KAAP;IACD;;;SAIE,eACqB;MACtB,OAAO,KAAK,OAAZ;IACD,C;SAIE,aACQ,MADR,EAC2B;MAC5B,KAAK,SAAL,CAAe,MAAf;IACD;;;WAQD,mBAAU,MAAV,EAA+C;MAAA;;MAAA,IAAlB,QAAkB,uEAAP,KAAO;MAC7C,IAAI,MAAM,KAAK,KAAK,OAApB,EACE;;MAGF,IAAI,WAAW,GAAA,SAAX,WAAW,GAAS;QACtB,IAAI,MAAI,CAAC,OAAT,EAEE,MAAI,CAAC,OAAL,CAAa,WAAb,GAA2B,IAA3B;QAGF,MAAM,CAAC,WAAP,GAAqB,MAArB;QACA,MAAI,CAAC,OAAL,GAAe,MAAf;MACD,CARD;;MAUA,IAAI,QAAJ,EAKE,KAAK,eAAL,CAAqB,WAArB,EALF,KAMO;QACL,WAAW;QACX,KAAK,QAAL;MACD;IACF;;;WAEO,uBAAc,UAAd,EAAsC,OAAtC,EAAyD;MAC/D,IAAI,UAAU,CAAC,IAAX,KAAoB,MAApB,IAA8B,OAAlC,EAA2C;QACzC,IAAI,IAAI,GAAG,KAAK,QAAL,CAAc,OAAd,GAAwB,KAAK,QAAL,CAAc,OAAd,CAAsB,OAAtB,CAAxB,GAAyD,MAApE;QACA,IAAI,SAAS,GAAG,IAAI,KAAK,MAAT,GAAkB,MAAlB,GAA2B,UAAU,CAAC,IAAX,GAAkB,GAAlB,GAAwB,IAAnE;QACA,OAAO;gBAAC,IAAD;qBAAO;QAAP,CAAP;MACD;;MAED,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,IADZ;QAEL,SAAS,EAAE,UAAU,CAAC;MAFjB,CAAP;IAID;;;WAED,yBAAgB,UAAhB,EAA4D;MAC1D,IAAI,OAAO,GAAG,KAAK,OAAL,CAAa,UAAU,CAAC,GAAxB,CAAd;;MACA,0BAAkB,KAAK,aAAL,CAAmB,UAAnB,EAA+B,OAA/B,CAAlB;MAAA,IAAK,SAAL,uBAAK,SAAL;;MAEA,IAAE,CAAG,KAAK,cAAL,CAAoB,SAApB,CAAL,EACE,KAAK,cAAL,CAAoB,SAApB,IAAiC,EAAjC;MAGF,IAAI,QAAQ,GAAG,KAAK,cAAL,CAAoB,SAApB,CAAf;MACA,IAAI,IAAI,GAAG,QAAQ,CAAC,MAAT,GAAkB,CAAlB,GACP,QAAQ,CAAC,GAAT,EADO,GAEP,IAAI,yCAAJ,CAAuB,IAAvB,CAFJ;MAIA,IAAI,CAAC,QAAL,GAAgB,SAAhB;;MAEA,IAAE,CAAG,KAAK,sBAAL,CAA4B,QAA5B,EAAL,EAA6C;QAC3C,UAAU,GAAG,UAAU,CAAC,IAAX,EAAb;QACA,UAAU,CAAC,IAAX,CAAgB,CAAhB,IAAqB,KAAK,sBAAL,CAA4B,CAAjD;QACA,UAAU,CAAC,IAAX,CAAgB,CAAhB,IAAqB,KAAK,sBAAL,CAA4B,CAAjD;MACD;;MAED,IAAI,CAAC,UAAL,GAAkB,UAAlB;;MAEA,KAAK,WAAL,CAAiB,IAAjB;;MACA,OAAO,IAAP;IACD;;;WAEO,qBAAY,YAAZ,EAA8C;MACpD,4BAAkB,YAAY,CAAC,UAA/B;MAAA,IAAK,IAAL,yBAAK,IAAL;MAAA,IAAW,GAAX,yBAAS,GAAT;MACA,YAAY,CAAC,OAAb,GAAuB,KAAK,OAAL,CAAa,GAAb,CAAvB;MACA,YAAY,CAAC,QAAb,GAAwB,KAAK,cAAL,CAAoB,IAApB,EAA0B,YAAY,CAAC,OAAvC,CAAxB;IACD;;;WAEO,wBAAe,IAAf,EAA6B,OAA7B,EAAyC;MAC/C,IAAI,MAAM,GAAG,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,OAA1B,CAAb;;MACA,IAAI,MAAM,IAAI,IAAd,EACE,OAAO,MAAP;MAGF,IAAI,QAAQ,GAAG,KAAK,QAAL,CAAc,UAAd,CAAyB,IAAzB,EAA+B,OAA/B,CAAf;MACA,IAAI,OAAJ,EACE,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,OAA1B,EAAmC,QAAnC;MAEF,OAAO,QAAP;IACD;;;SAKE,eACsC;MACvC,OAAO,KAAK,CAAC,IAAN,CAAW,KAAK,aAAL,CAAmB,MAAnB,EAAX,CAAP;IACD;;;WAQD,iBAAQ,GAAR,EAA6C;MAC3C,OAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,KAA+B,IAAtC;IACD;;;WAMD,wBAAe,IAAf,EAAmD;MACjD,OAAO,KAAK,YAAL,CAAkB,MAAlB,CAAwB,UAAC,CAAD;QAAA,OAAM,CAAC,CAAC,UAAF,IAAgB,CAAC,CAAC,UAAF,CAAa,IAAb,KAAsB,IAA5C;MAAA,CAAxB,CAAP;IACD;;;WAMD,oBAAW,IAAX,EAAiD;MAC/C,IAAI,IAAI,IAAI,IAAI,CAAC,UAAjB,EACE,OAAO,IAAI,CAAC,UAAL,CAAgB,GAAvB;MAGF,OAAO,IAAP;IACD;;;WAKD,oBAAW,KAAX,EAAqC;MACnC,IAAI,IAAI,GAAG,IAAI,yCAAJ,CAAS,KAAK,CAAC,CAAf,EAAkB,KAAK,CAAC,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAX;MACA,IAAI,WAAW,GAAG,KAAK,MAAL,CAAY,qBAAZ,CAAkC,IAAlC,CAAlB;;MAIA,sDAAuB,WAAvB,2CAAoC;QAAA,IAA3B,UAA2B;QAClC,IAAI,UAAU,CAAC,IAAX,CAAgB,UAAhB,CAA2B,IAA3B,CAAJ,EACE,OAAO,UAAU,CAAC,GAAlB;MAEH;;MAED,OAAO,IAAP;IACD;;;WAKD,uBAAc;MACZ,oBAAoB,CAAC,KAAK,YAAN,CAApB;IACD;;;WAKD,oBAAkD;MAAA;;MAAA,IAAzC,OAAyC,uEAAJ,EAAI;MAEhD,IAAI,KAAK,gBAAL,IAAyB,OAAO,qBAAP,KAAiC,WAA9D,EACE;;MAKF,IAAI,KAAK,oBAAT,EAA+B;QAC7B,SAAc,KAAK,oBAAnB,EAAyC,OAAzC;;QACA;MACD;;MAED,KAAK,oBAAL,GAA4B,OAA5B;MACA,KAAK,YAAL,GAAoB,qBAAqB,CAAA,YAAO;QAC9C,MAAI,CAAC,YAAL,GAAoB,IAApB;;QACA,MAAI,CAAC,WAAL;MACD,CAHwC,CAAzC;IAID;;;WAMD,uBAAkF;MAAA;;MAAA,IAAtE,OAAsE,uEAAjC,KAAK,oBAAL,IAA6B,EAAI;;MAEhF,IAAI,KAAK,YAAT,EAAuB;QACrB,oBAAoB,CAAC,KAAK,YAAN,CAApB;QACA,KAAK,YAAL,GAAoB,IAApB;QAGA,OAAO,mCAAO,KAAK,oBAAZ,GAAqC,OAArC,CAAP;MACD;;MAGD,KAAK,oBAAL,GAA4B,IAA5B;MAIA,IAAE,CAAG,KAAK,MAAR,IAAc,CAAK,KAAK,WAAxB,IAAuC,KAAK,gBAA9C,EACE;;MAGF,IAAI,YAAY,GAAG,KAAK,gBAAL,EAAnB;;MAGA,IAAI,OAAO,OAAO,CAAC,YAAf,KAAgC,UAApC,EACE,OAAO,CAAC,YAAR;MAIF,KAAK,MAAL,CAAY,QAAZ,CAAqB,OAArB;;MACA,KAAK,eAAL,CAAqB,KAAK,MAAL,CAAY,cAAZ,EAArB;;MAGA,IAAI,OAAO,OAAO,CAAC,WAAf,KAA+B,UAAnC,EACE,OAAO,CAAC,WAAR;MAKF,IAAI,WAAW,GAAG,KAAK,cAAL,EAAlB;;MACA,IAAI,oBAAoB,GAAG,KAAK,oBAAL,CAA0B,YAA1B,EAAwC,OAAxC,CAA3B;;MACA,IAAI,cAAc,GAAG,OAAO,CAAC,cAAR,GAAyB,CAAzB,GAA6B,oBAAoB,CAAC,CAAvE;MACA,IAAI,cAAc,GAAG,OAAO,CAAC,cAAR,GAAyB,CAAzB,GAA6B,oBAAoB,CAAC,CAAvE;MACA,cAAc,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,KAAK,WAAL,CAAiB,KAAjB,GAAyB,WAAW,CAAC,KAA9C,EAAqD,cAArD,CAAZ,CAAjB;MACA,cAAc,GAAG,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,CAAC,GAAL,CAAS,KAAK,WAAL,CAAiB,MAAjB,GAA0B,WAAW,CAAC,MAA/C,EAAuD,cAAvD,CAAZ,CAAjB;MAEA,IAAI,gBAAgB,GAAG,KAAvB;;MACA,IAAI,cAAc,KAAK,WAAW,CAAC,CAA/B,IAAoC,cAAc,KAAK,WAAW,CAAC,CAAvE,EAAwE;QAMtE,IAAI,OAAO,CAAC,QAAR,IAAgB,CAAK,KAAK,sBAAL,CAA4B,QAA5B,EAAzB,EAAiE;UAC/D,KAAK,sBAAL,CAA4B,CAA5B,IAAiC,WAAW,CAAC,CAAZ,GAAgB,cAAjD;UACA,KAAK,sBAAL,CAA4B,CAA5B,IAAiC,WAAW,CAAC,CAAZ,GAAgB,cAAjD;UACA,gBAAgB,GAAG,KAAK,cAAL,CAAoB,OAAO,CAAC,cAA5B,CAAnB;QACD,CAJD,MAKE,KAAK,iBAAL,CAAuB,IAAI,yCAAJ,CAAU,cAAV,EAA0B,cAA1B,CAAvB;OAXJ,MAcE,gBAAgB,GAAG,KAAK,cAAL,CAAoB,OAAO,CAAC,cAA5B,CAAnB;;MAIF,IAAE,EAAI,OAAO,CAAC,WAAR,IAAuB,OAAO,CAAC,QAAnC,CAAF,EACE,KAAK,iBAAL;;MAIF,IAAI,OAAO,CAAC,QAAR,IAAoB,gBAAxB,EAA0C;QACxC,KAAK,kBAAL;;QAEA,IAAI,IAAI,GAAA,SAAJ,IAAI,GAAS;UACf,MAAI,CAAC,mBAAL;;UAGA,IAAE,CAAG,MAAI,CAAC,sBAAL,CAA4B,QAA5B,EAAL,EAA6C;YAE3C,4BAAa,MAAI,CAAC,cAAL,EAAb;YAAA,IAAK,CAAL,yBAAK,CAAL;YAAA,IAAQ,CAAR,yBAAM,CAAN;;YACA,MAAI,CAAC,2BAAL;;YACA,MAAI,CAAC,iBAAL,CAAuB,IAAI,yCAAJ,CAAU,CAAV,EAAa,CAAb,CAAvB;UACD;;UAED,IAAI,OAAO,OAAO,CAAC,cAAf,KAAkC,UAAtC,EACE,OAAO,CAAC,cAAR;QAEH,CAdD;;QAiBA,UAAU,CAAC,IAAD,EAAO,KAAK,kBAAL,GAA0B,GAAjC,CAAV;QACA;MACD,CAtBD,MAsBO,IAAI,OAAO,OAAO,CAAC,cAAf,KAAkC,UAAtC,EACL,OAAO,CAAC,cAAR;IAEH;;;WAKO,6BAAoB;MAE1B,IAAI,KAAK,YAAL,IAAqB,KAAK,YAA9B,EACE;;MAGF,sDAAgB,KAAK,mBAAL,CAAyB,IAAzB,EAAhB,2CAAiD;QAAA,IAAxC,GAAwC;;QAC/C,IAAI,IAAI,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,GAAvB,CAAX;;QACA,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB;;QACA,KAAK,SAAL,CAAe,GAAf,CAAmB,IAAnB;MACD;IACF;;;WAEO,8BAAqB;MAC3B,KAAK,QAAL,CAAc,eAAd;IACD;;;WAEO,+BAAsB;MAC5B,KAAK,QAAL,CAAc,aAAd;IACD;;;WAEO,4BAAwC;MAC9C,IAAE,CAAG,KAAK,oBAAV,EACE,OAAO,IAAP;MAGF,IAAI,WAAW,GAAG,KAAK,cAAL,EAAlB;;MAGA,IAAI,KAAK,QAAL,CAAc,eAAlB,EAAmC;QACjC,IAAI,GAAG,GAAG,KAAK,QAAL,CAAc,eAAd,CAA8B,WAA9B,CAAV;;QACA,IAAI,GAAG,IAAI,IAAX,EAAiB;UACf,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,GAA1B,CAAjB;UACA,IAAI,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,eAAhB,CAAgC,WAAhC,CAAb;;UACA,IAAI,MAAJ,EAAY;YACV,IAAI,KAAG,GAAG,UAAU,CAAC,GAArB;YACA,IAAI,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,MAAhB,EAAwB,CAAxB,GAA4B,WAAW,CAAC,CAArD;YACA,OAAO;mBAAC,KAAD;0BAAM,UAAN;sBAAkB,MAAlB;sBAA0B;YAA1B,CAAP;UACD;QACF;MACF;;MAGD,IAAI,WAAW,CAAC,CAAZ,KAAkB,CAAlB,IAAmB,CAAK,KAAK,yBAAjC,EACE,OAAO,IAAP;MAIF,IAAI,YAAY,GAAwB,IAAxC;;MAEA,sDAAwB,KAAK,aAA7B,2CAA4C;QAAA;;QAAA;;QAAA,IAAlC,KAAkC;QAAA,IAA7B,IAA6B;QAC1C,IAAI,WAAU,GAAG,IAAI,CAAC,UAAtB;;QACA,IAAI,WAAU,IAAI,WAAU,CAAC,IAAX,CAAgB,IAAhB,GAAuB,CAAzC,EAA4C;UAC1C,IAAI,OAAM,GAAG,WAAU,CAAC,IAAX,CAAgB,eAAhB,CAAgC,WAAhC,CAAb;;UAEA,IAAI,OAAJ,EAAY;YACV,IAAI,OAAM,GAAG,WAAU,CAAC,IAAX,CAAgB,OAAhB,EAAwB,CAAxB,GAA4B,WAAW,CAAC,CAArD;;YACA,IAAE,CAAG,YAAH,IAAoB,OAAM,GAAG,YAAY,CAAC,MAA5C,EACE,YAAY,GAAG;mBAAC,KAAD;0BAAM,WAAN;sBAAkB,OAAlB;sBAA0B;YAA1B,CAAf;UAEH;QACF;MACF;;MAED,OAAO,YAAP;IACD;;;WAEO,8BAAqB,YAArB,EAAwD,OAAxD,EAA4F;MAClG,IAAI,aAAa,GAAG,KAAK,cAAL,EAApB;;MAEA,IAAI,YAAJ,EAAkB;YACE,G;QAAlB,IAAI,WAAW,GAAA,CAAA,CAAG,GAAmB,GAAnB,OAAO,CAAC,WAAX,MAAsB,IAAtB,IAAG,GAAmB,KAAnB,KAAA,CAAH,GAAG,KAAA,CAAH,GAAG,GAAmB,CAAE,QAAxB,IACX,OAAO,CAAC,WAAR,CAAoB,QAApB,CAA6B,GAA7B,CAAiC,YAAY,CAAC,GAA9C,CADW,GAEX,KAAK,MAAL,CAAY,aAAZ,CAA0B,YAAY,CAAC,UAAb,CAAwB,GAAlD,CAFJ;;QAIA,IAAI,WAAJ,EAAiB;UACf,IAAI,UAAU,GAAI,WAAW,CAAC,IAAZ,CAAiB,YAAY,CAAC,MAA9B,EAAsC,CAAtC,GAA0C,aAAa,CAAC,CAAxD,GAA6D,YAAY,CAAC,MAA5F;UACA,aAAa,CAAC,CAAd,IAAmB,UAAnB;QACD;MACF;;MAED,OAAO,aAAP;IACD;;;WAED,0BAAuB;MACrB,IAAI,CAAC,GAAG,KAAK,WAAb;MACA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,KAAK,sBAAL,CAA4B,CAA1C;MACA,IAAI,CAAC,GAAG,CAAC,CAAC,CAAF,GAAM,KAAK,sBAAL,CAA4B,CAA1C;MACA,OAAO,IAAI,yCAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAC,CAAC,KAAjB,EAAwB,CAAC,CAAC,MAA1B,CAAP;IACD;;;WAED,iCAAwB;MACtB,IAAI,IAAI,GAAG,KAAK,cAAL,GAAsB,KAAK,gBAAL,CAAsB,kBAAtB,EAAtB,GAAmE,KAAK,cAAL,EAA9E;MACA,KAAK,mBAAL,GAA2B,KAAK,iBAAL,CAAuB,IAAvB,CAA3B;MACA,OAAO,KAAK,mBAAZ;IACD;;;WAEO,2BAAkB,IAAlB,EAA4C;MAAA,IAAd,IAAc,uEAAP,KAAO;MAClD,IAAI,WAAW,GAAG,KAAK,MAAL,CAAY,qBAAZ,CAAkC,IAAlC,CAAlB;MACA,IAAI,GAAG,GAAG,IAAI,GAAJ,EAAV;;MAEA,sDAAuB,WAAvB,2CAAoC;QAAA,IAA3B,UAA2B;QAClC,IAAI,IAAJ,EACE,UAAU,GAAG,UAAU,CAAC,IAAX,EAAb;QAGF,GAAG,CAAC,GAAJ,CAAQ,UAAU,CAAC,GAAnB,EAAwB,UAAxB;MACD;;MAED,OAAO,GAAP;IACD;;;WAED,0BAAoC;MAAA;;MAAA,IAArB,WAAqB,uEAAP,KAAO;MAClC,IAAE,CAAG,KAAK,WAAV,EACE;MAGF,IAAI,kBAAkB,GAAG,KAAK,qBAAL,EAAzB;MACA,IAAI,gBAAgB,GAAG,KAAK,aAA5B;MACA,IAAI,KAAJ,EAAW,QAAX,EAAqB,QAArB;;MAIA,IAAI,WAAJ,EAAiB;QACf,KAAK,GAAG,kBAAR;QACA,QAAQ,GAAG,gBAAX;QACA,QAAQ,GAAG,IAAI,GAAJ,EAAX;MACD,CAJD,MAIO;QAAA,4BAC0B,yCAAU,CAAC,gBAAD,EAAmB,kBAAnB,CADpC;;QACH,KADG,yBACH,KADG;QACI,QADJ,yBACE,QADF;QACc,QADd,yBACY,QADZ;;QAGL,sDAAgB,QAAhB,2CAA0B;UAAA,IAAjB,GAAiB;UACxB,IAAI,IAAI,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,GAArB,CAAX;UACA,IAAE,CAAG,IAAH,IAAO,CAAK,IAAI,CAAC,UAAnB,EACE;UAGF,IAAI,IAAI,GAAG,KAAK,OAAL,CAAa,kBAAkB,CAAC,GAAnB,CAAuB,GAAvB,EAA4B,GAAzC,CAAX;UACA,IAAI,IAAI,CAAC,OAAL,KAAiB,IAArB,EACE,QAAQ,CAAC,MAAT,CAAgB,GAAhB,EADF,KAEO;YAEL,2BAAkB,KAAK,aAAL,CAAmB,IAAI,CAAC,UAAxB,EAAoC,IAApC,CAAlB;YAAA,IAAK,SAAL,wBAAK,SAAL;;YACA,IAAI,IAAI,CAAC,QAAL,KAAkB,SAAtB,EAAiC;cAC/B,QAAQ,CAAC,MAAT,CAAgB,GAAhB;cACA,KAAK,CAAC,GAAN,CAAU,GAAV;cACA,QAAQ,CAAC,GAAT,CAAa,GAAb;YACD;UACF;QACF;;QAGD,IAAI,KAAK,CAAC,IAAN,KAAe,CAAf,IAAoB,QAAQ,CAAC,IAAT,KAAkB,CAAtC,IAA2C,QAAQ,CAAC,IAAT,KAAkB,CAAjE,EAAoE;UAClE,IAAI,KAAK,YAAT,EACE,KAAK,iBAAL;UAGF;QACD;MACF;;MAKD,IAAI,OAAO,GAAG,IAAI,GAAJ,EAAd;;MAEA,uDAAgB,QAAQ,CAAC,IAAT,EAAhB,8CAAiC;QAAA,IAAxB,KAAwB;;QAC/B,IAAI,KAAI,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,KAAvB,CAAX;;QACA,IAAI,KAAJ,EAAU;UACR,OAAO,CAAC,GAAR,CAAY,KAAZ;;UACA,KAAK,aAAL,CAAmB,MAAnB,CAA0B,KAA1B;;UAKA,IAAI,KAAK,YAAT,EACE,KAAK,YAAL,CAAkB,QAAlB,CAA2B,GAA3B,CAA+B,KAA/B,EAAoC,KAApC,EADF,KAGE,KAAK,SAAL,CAAe,KAAf;QAEH;MACF;;MAED,uDAAgB,KAAK,CAAC,IAAN,EAAhB,8CAA8B;QAAA,IAArB,IAAqB;QAC5B,IAAI,UAAU,GAAG,kBAAkB,CAAC,GAAnB,CAAuB,IAAvB,CAAjB;;QACA,IAAI,MAAI,SAAR;;QAMA,IAAI,KAAK,YAAT,EAAuB;UAErB,IAAI,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,GAApC,CAAwC,IAAxC,CAAJ,EACE,UAAU,GAAG,KAAK,YAAL,CAAkB,iBAAlB,CAAoC,GAApC,CAAwC,IAAxC,CAAb;UAGF,MAAI,GAAG,KAAK,YAAL,CAAkB,QAAlB,CAA2B,GAA3B,CAA+B,IAA/B,CAAP;;UACA,IAAI,MAAJ,EAAU;YACR,KAAK,YAAL,CAAkB,QAAlB,CAA2B,MAA3B,CAAkC,IAAlC;;YACA,KAAK,gBAAL,CAAsB,MAAtB,EAA4B,UAA5B;UACD;QACF;;QAED,IAAE,CAAG,MAAL,EAAW;UAET,MAAI,GAAG,KAAK,eAAL,CAAqB,UAArB,CAAP;UAGA,IAAE,CAAG,OAAO,CAAC,GAAR,CAAY,MAAZ,CAAL,EACE,KAAK,SAAL,CAAe,GAAf,CAAmB,MAAnB;QAEH;;QAED,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,EAA4B,MAA5B;;QACA,OAAO,CAAC,MAAR,CAAe,MAAf;MACD;;MAED,uDAAgB,QAAhB,8CAA0B;QAAA,IAAjB,IAAiB;;QACxB,IAAI,MAAI,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,IAArB,CAAX;;QACA,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,IAA7B;;QACA,KAAK,WAAL,CAAiB,MAAjB;MACD;;MAGD,IAAE,CAAG,KAAK,YAAV,EACE,KAAK,WAAL,CAAiB,OAAjB;;MAGF,KAAK,iBAAL;;MACA,KAAK,kBAAL;;MAEA,IAAI,gBAAgB,GAAG,KAAK,YAAL,KAAsB,KAAK,CAAC,IAAN,GAAa,CAAb,IAAkB,QAAQ,CAAC,IAAT,GAAgB,CAAlC,IAAuC,KAAK,iBAAL,EAA7D,CAAvB;;MACA,IAAI,gBAAJ,EACE,qBAAqB,CAAA,YAAO;QAG1B,IAAI,MAAI,CAAC,YAAT,EACE,qBAAqB,CAAA;UAAA,OAAO,MAAI,CAAC,iBAAL,EAAP;QAAA,CAAA,CAArB;MAEH,CANoB,CAArB;MASF,OAAO,gBAAP;IACD;;;WAED,uBAAc;MACZ,IAAI,KAAK,cAAT,EACE,KAAK,gBAAL,CAAsB,cAAtB;IAEH;;;WAEO,8BAAqB;MAAA;;MAK3B,IAAI,gBAAgB,GAAG,IAAI,GAAJ,CAAQ,CAAC,CAAC,IAAD,EAAO,EAAP,CAAD,CAAR,CAAvB;;MACA,uDAAiB,KAAK,SAAtB,8CAAiC;QAAA,IAAxB,KAAwB;QAC/B,IAAE,CAAG,gBAAgB,CAAC,GAAjB,CAAqB,KAAI,CAAC,UAAL,CAAgB,SAArC,CAAL,EACE,gBAAgB,CAAC,GAAjB,CAAqB,KAAI,CAAC,UAAL,CAAgB,SAArC,EAAgD,EAAhD;QAGF,gBAAgB,CAAC,GAAjB,CAAqB,KAAI,CAAC,UAAL,CAAgB,SAArC,EAAgD,IAAhD,CAAqD,KAArD;QACA,IAAE,CAAG,gBAAgB,CAAC,GAAjB,CAAqB,KAAI,CAAC,UAAL,CAAgB,GAArC,CAAL,EACE,gBAAgB,CAAC,GAAjB,CAAqB,KAAI,CAAC,UAAL,CAAgB,GAArC,EAA0C,EAA1C;MAEH;;MAED,IAAI,SAAS,GAAA,SAAT,SAAS,CAAI,MAAJ,EAAgC,KAAhC;QAAA,OAAqE,KAAK,CAAC,GAAN,CAAS,UAAC,IAAD,EAAS;UAClG,IAAI,QAAQ,GAAG,gBAAgB,CAAC,GAAjB,CAAqB,IAAI,CAAC,UAAL,CAAgB,GAArC,CAAf;UACA,OAAO,MAAI,CAAC,QAAL,CAAc,aAAd,CACL,MADK,EAEL,IAFK,EAGL,QAHK,EAGG,UACP,UADO;YAAA,OACQ,SAAS,CAAC,IAAD,EAAO,UAAP,CADjB;UAAA,CAHH,CAAP;QAMD,CARiF,CAArE;MAAA,CAAb;;MAUA,IAAI,SAAQ,GAAG,SAAS,CAAC,IAAD,EAAO,gBAAgB,CAAC,GAAjB,CAAqB,IAArB,CAAP,CAAxB;MACA,KAAK,QAAL,CAAc,eAAd,CAA8B,SAA9B;IACD;;;WAEO,0BAAiB,IAAjB,EAA2C,UAA3C,EAAmE;MACzE,IAAI,IAAI,CAAC,UAAL,KAAoB,UAAxB,EACE,OAAO,KAAP;MAGF,IAAI,CAAC,UAAL,GAAkB,UAAlB;MACA,OAAO,IAAP;IACD;;;WAEO,6BAAoB;MAC1B,IAAI,OAAO,GAAG,KAAd;;MAGA,uDAAiB,KAAK,aAAL,CAAmB,MAAnB,EAAjB,8CAA8C;QAAA,IAArC,IAAqC;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,UAAf;;QACA,IAAI,GAAJ,EAAS;UACP,IAAI,YAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,GAAG,CAAC,GAA9B,CAAjB;;UACA,IAAI,KAAK,gBAAL,CAAsB,IAAtB,EAA4B,YAA5B,CAAJ,EACE,OAAO,GAAG,IAAV;QAEH;MACF;;MAGD,IAAI,KAAK,YAAT,EAAuB;QACrB,uDAAiB,KAAK,YAAL,CAAkB,QAAlB,CAA2B,MAA3B,EAAjB,8CAAsD;UAAA,IAA7C,MAA6C;UACpD,IAAI,IAAG,GAAG,MAAI,CAAC,UAAf;UACA,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,IAAG,CAAC,GAA9B,CAAjB;UACA,IAAI,KAAK,gBAAL,CAAsB,MAAtB,EAA4B,UAA5B,CAAJ,EACE,OAAO,GAAG,IAAV;QAEH;;QAED,uDAAiB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,MAA1B,EAAjB,8CAAqD;UAAA,IAA5C,KAA4C;UACnD,IAAI,KAAG,GAAG,KAAI,CAAC,UAAf;;UACA,IAAI,YAAU,GAAG,KAAK,YAAL,CAAkB,eAAlB,CAAkC,GAAlC,CAAsC,KAAG,CAAC,GAA1C,KAAkD,KAAnE;;UACA,YAAU,GAAG,KAAK,MAAL,CAAY,kBAAZ,CAA+B,YAAU,CAAC,IAAX,EAA/B,CAAb;UACA,IAAI,KAAK,gBAAL,CAAsB,KAAtB,EAA4B,YAA5B,CAAJ,EACE,OAAO,GAAG,IAAV;QAEH;MACF;;MAED,IAAI,OAAJ,EACE,KAAK,kBAAL;IAEH;;;WAEO,6BAAoB;MAC1B,IAAE,CAAG,KAAK,YAAV,EACE,OAAO,KAAP;;MAGF,uDAAiB,KAAK,aAAL,CAAmB,MAAnB,EAAjB,8CAA8C;QAAA,IAArC,IAAqC;QAC5C,IAAI,GAAG,GAAG,IAAI,CAAC,UAAf;QACA,IAAE,CAAG,GAAL,EACE,OAAO,IAAP;QAGF,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,GAAG,CAAC,GAA9B,CAAjB;QACA,I,CAEG,GAAG,CAAC,IAAJ,CAAS,MAAT,CAAgB,UAAU,CAAC,IAA3B,C,IACD,GAAG,CAAC,OAAJ,KAAgB,UAAU,CAAC,O,IAC3B,GAAG,CAAC,SAAJ,KAAkB,UAAU,CAAC,SAJ/B,EAME,OAAO,IAAP;MAEH;;MAED,OAAO,KAAP;IACD;;;WAED,mBAAU,IAAV,EAAoC;MAClC,IAAI,CAAC,eAAL;;MACA,KAAK,cAAL,CAAoB,IAAI,CAAC,QAAzB,EAAmC,IAAnC,CAAwC,IAAxC;IACD;;;WAED,qBAAY,QAAZ,EAA+C;MAC7C,uDAAiB,QAAjB;QAAA,IAAS,IAAT;;QACE,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB;MADF;IAGD;;;WAED,wBAAe,GAAf,EAAyB,IAAzB,EAAqC;MAGnC,IAAE,CAAG,KAAK,MAAL,CAAY,cAAjB,EACE;;MAKF,IAAI,KAAK,gBAAT,EAA2B;QACzB,KAAK,gBAAL,CAAsB,GAAtB,CAA0B,GAA1B,EAA+B,IAA/B;;QACA;MACD;;MAGD,IAAI,OAAO,GAAG,KAAK,MAAL,CAAY,cAAZ,CAA2B,GAA3B,EAAgC,IAAhC,CAAd;MACA,IAAI,OAAJ,EACE,KAAK,QAAL;IAEH;;;WAED,0BAAiB;MACf,KAAK,YAAL,GAAoB,IAApB;IACD;;;WAED,wBAAe;MACb,KAAK,YAAL,GAAoB,KAApB;;MACA,KAAK,iBAAL;;MACA,KAAK,kBAAL;IACD;;;WAEO,uCAA8B;MAEpC,IAAE,CAAG,KAAK,sBAAL,CAA4B,QAA5B,EAAL,EAA6C;QAC3C,KAAK,sBAAL,GAA8B,IAAI,yCAAJ,CAAU,CAAV,EAAa,CAAb,CAA9B;;QACA,KAAK,iBAAL;MACD;IACF;;;WAOD,sBAAa,GAAb,EAAuB,OAAvB,EAAsD;MAEpD,IAAI,GAAG,IAAI,IAAX,EACE;MAGF,IAAI,UAAU,GAAG,KAAK,MAAL,CAAY,aAAZ,CAA0B,GAA1B,CAAjB;MACA,IAAE,CAAG,UAAL,EACE;MAGF,wBAMI,OANJ,CAAK,QAAL;MAAA,IACE,QADF,kCACa,GADb;MAAA,4BAMI,OANJ,CACgB,aADhB;MAAA,IAEE,aAFF,sCAEkB,IAFlB;MAAA,6BAMI,OANJ,CAEsB,aAFtB;MAAA,IAGE,aAHF,uCAGkB,IAHlB;MAAA,uBAMI,OANJ,CAGsB,OAHtB;MAAA,IAIE,OAJF,iCAIY,CAJZ;MAAA,uBAMI,OANJ,CAIa,OAJb;MAAA,IAKE,OALF,iCAKY,CALZ;MAQA,IAAI,CAAC,GAAG,KAAK,WAAL,CAAiB,CAAzB;MACA,IAAI,CAAC,GAAG,KAAK,WAAL,CAAiB,CAAzB;MACA,IAAI,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,CAAhB,GAAoB,OAA/B;MACA,IAAI,IAAI,GAAG,UAAU,CAAC,IAAX,CAAgB,CAAhB,GAAoB,OAA/B;MACA,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,WAAL,CAAiB,KAAhC;MACA,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,WAAL,CAAiB,MAAhC;;MAEA,IAAI,aAAJ,EAAmB;QACjB,IAAI,IAAI,IAAI,CAAR,IAAa,IAAI,KAAK,CAA1B,EACE,CAAC,GAAG,IAAJ,CADF,KAEO,IAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,GAAuB,IAA3B,EACL,CAAC,IAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,GAAuB,IAA5B;MAEH;;MAED,IAAI,aAAJ,EAAmB;QACjB,IAAI,IAAI,IAAI,CAAR,IAAa,IAAI,KAAK,CAA1B,EACE,CAAC,GAAG,IAAJ,CADF,KAEO,IAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,GAAuB,IAA3B,EACL,CAAC,IAAI,UAAU,CAAC,IAAX,CAAgB,IAAhB,GAAuB,IAA5B;MAEH;;MAED,OAAO,KAAK,QAAL,CAAc,IAAI,yCAAJ,CAAU,CAAV,EAAa,CAAb,CAAd,EAA+B,QAA/B,CAAP;IACD;;;WAQD,kBAAS,OAAT,EAA+D;MAAA;;MAAA,IAAvC,QAAuC,uEAApB,GAAoB;;MAE7D,IAAI,KAAK,gBAAT,EAA2B;QACzB,KAAK,gBAAL,CAAsB,MAAtB;;QACA,KAAK,gBAAL,GAAwB,IAAxB;MACD;;MAGD,IAAI,QAAQ,IAAI,CAAZ,IAAiB,KAAK,WAAL,CAAiB,WAAjB,CAA6B,OAA7B,CAArB,EAA2D;QACzD,KAAK,iBAAL,CAAuB,OAAvB;;QACA,OAAO,OAAO,CAAC,OAAR,EAAP;MACD;;MAED,KAAK,cAAL;MAEA,KAAK,gBAAL,GAAwB,yCAAK,CAAC,KAAK,WAAN,EAAmB,OAAnB,EAA2B,QAA3B,EAAqC,yCAArC,EAA4C,UAAE,MAAF,EAAY;QAAC,MAAI,CAAC,iBAAL,CAAuB,MAAvB;MAAgC,CAAzF,CAA7B;;MACA,KAAK,gBAAL,CAAsB,IAAtB,CAA0B,YAAO;QAC/B,MAAI,CAAC,gBAAL,GAAwB,IAAxB;;QAIA,uDAAwB,MAAI,CAAC,gBAA7B;UAAA;;UAAA;;UAAA,IAAU,GAAV;UAAA,IAAe,IAAf;;UACE,MAAI,CAAC,cAAL,CAAoB,GAApB,EAAyB,IAAzB;QADF;;QAIA,MAAI,CAAC,gBAAL,CAAsB,KAAtB;;QACA,MAAI,CAAC,QAAL;;QACA,MAAI,CAAC,wBAAL;;QACA,MAAI,CAAC,YAAL;MACD,CAbD;;MAeA,OAAO,KAAK,gBAAZ;IACD;;;WAEO,yBAAgB,MAAhB,EAAoC,QAApC,EAAwD;MAC9D,KAAK,iBAAL;;MACA,IAAI,KAAK,gBAAT,EACE,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,IAA9B,CAAmC,MAAnC;;MAEF,KAAK,eAAL,CAAqB,QAArB;IACD;;;WAEO,6BAAoB;MAC1B,IAAE,CAAG,KAAK,gBAAV,EACE,KAAK,gBAAL,GAAwB,IAAI,yCAAJ,EAAxB;MAGF,KAAK,gBAAL,CAAsB,KAAtB;IACD;;;WAEO,yBAAgB,QAAhB,EAAoC;MAC1C,IAAE,CAAG,KAAK,gBAAV,EACE,OAAO,KAAP;MAIF,IAAI,QAAQ,IAAI,IAAhB,EACE,KAAK,gBAAL,CAAsB,QAAtB,GAAiC,QAAjC;MAKF,IAAE,EAAI,KAAK,gBAAL,CAAsB,KAA1B,GAAkC,CAApC,EACE,OAAO,KAAP;;MAIF,IAAI,KAAK,gBAAL,CAAsB,OAAtB,CAA8B,MAA9B,KAAyC,CAA7C,EAAgD;QAC9C,KAAK,gBAAL,GAAwB,IAAxB;QACA,OAAO,KAAP;MACD;;MAGD,IAAI,KAAK,gBAAL,CAAsB,QAAtB,IAAkC,IAAtC,EACE,KAAK,gBAAL,CAAsB,QAAtB,GAAiC,IAAjC;;MAIF,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,KAAK,gBAAjC;;MACA,KAAK,gBAAL,GAAwB,IAAxB;;MAEA,KAAK,wBAAL;;MACA,OAAO,IAAP;IACD;;;WAEO,oCAA2B;MAGjC,IAAI,KAAK,YAAL,IAAqB,KAAK,gBAA9B,EACE;;MAGF,IAAI,IAAI,GAAG,KAAK,iBAAL,CAAuB,KAAvB,EAAX;;MACA,IAAI,IAAJ,EACE,KAAK,mBAAL,CAAyB,IAAzB;IAEH;;;WAEO,2BAAwB;MAC9B,OAAO,IAAI,yCAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,KAAK,WAAL,CAAiB,KAAhC,EAAuC,KAAK,WAAL,CAAiB,MAAxD,CAAP;IACD;;;WAEO,6BAAoB,WAApB,EAAoD;MAAA;;MAC1D,KAAK,YAAL,GAAoB,WAApB;MAEA,KAAK,WAAL,CAAiB;QACf,WAAW,EAAE,WADE;QAEf,QAAQ,EAAE,WAAW,CAAC,QAFP;QAIf,YAAY,EAAA,wBAAQ;UAGlB,IAAI,WAAW,CAAC,QAAhB,EACE,WAAW,CAAC,UAAZ,GAAyB,MAAI,CAAC,iBAAL,CAAuB,MAAI,CAAC,eAAL,EAAvB,EAA+C,IAA/C,CAAzB;;UAIF,uDAAmB,WAAW,CAAC,OAA/B;YAAA,IAAS,MAAT;YACE,MAAM;UADR;QAGD,CAfc;QAiBf,WAAW,EAAA,uBAAQ;UAEjB,IAAI,WAAW,CAAC,QAAhB,EAA0B;YACxB,WAAW,CAAC,QAAZ,GAAuB,MAAI,CAAC,iBAAL,CAAuB,MAAI,CAAC,eAAL,EAAvB,CAAvB;;YACA,MAAI,CAAC,2BAAL,CAAiC,WAAjC;UACD,CAHD,MAIE,MAAI,CAAC,YAAL,GAAoB,IAApB;QAEH,CAzBc;QA2Bf,cAAc,EAAA,0BAAQ;UAEpB,IAAI,WAAW,CAAC,QAAZ,CAAqB,IAArB,GAA4B,CAA5B,IAAiC,WAAW,CAAC,OAAZ,CAAoB,IAApB,GAA2B,CAAhE;YACE,uDAAiB,yCAAe,CAAC,WAAW,CAAC,QAAZ,CAAqB,MAArB,EAAD,EAAgC,WAAW,CAAC,OAAZ,CAAoB,MAApB,EAAhC,CAAhC,8CAA+F;cAAA,IAAtF,IAAsF;;cAC7F,MAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,IAAtB;;cACA,MAAI,CAAC,SAAL,CAAe,IAAf;YACD;UAJH;;UAOA,MAAI,CAAC,YAAL,GAAoB,IAApB;;UAGA,MAAI,CAAC,iBAAL;;UACA,MAAI,CAAC,kBAAL;;UAEA,MAAI,CAAC,wBAAL;QACD;MA3Cc,CAAjB;IA6CD;;;WAEO,qCAA4B,WAA5B,EAA4D;MAClE,IAAK,UAAL,GAA6B,WAA7B,CAAK,UAAL;MAAA,IAAiB,QAAjB,GAA6B,WAA7B,CAAe,QAAf;;MAGA,uDAA8B,UAA9B;QAAA;;QAAA;;QAAA,IAAU,GAAV;QAAA,IAAe,UAAf;QACE,IAAI,QAAQ,CAAC,GAAT,CAAa,GAAb,CAAJ,EAEE,WAAW,CAAC,iBAAZ,CAA8B,GAA9B,CAAkC,GAAlC,EAAuC,UAAvC,EAFF,KAME,WAAW,CAAC,eAAZ,CAA4B,GAA5B,CAAgC,UAAU,CAAC,GAA3C,EAAgD,UAAhD;MAPJ;;MAYA,uDAA8B,QAA9B;QAAA;;QAAA;;QAAA,IAAU,IAAV;QAAA,IAAe,WAAf;;QACE,IAAE,CAAG,UAAU,CAAC,GAAX,CAAe,IAAf,CAAL,EAA0B;UACxB,IAAI,iBAAiB,GAAG,KAAK,MAAL,CAAY,oBAAZ,CAAiC,WAAU,CAAC,IAAX,EAAjC,CAAxB;UACA,WAAW,CAAC,iBAAZ,CAA8B,GAA9B,CAAkC,IAAlC,EAAuC,iBAAvC;QACD;MAJH;;MAQA,uDAAwB,KAAK,aAA7B;QAAA;;QAAA;;QAAA,IAAU,IAAV;QAAA,IAAe,IAAf;;QAIE,IAAE,CAAG,QAAQ,CAAC,GAAT,CAAa,IAAb,CAAH,IAAwB,IAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,KAArB,GAA6B,CAAvD,EAA0D;UACxD,WAAW,CAAC,OAAZ,CAAoB,GAApB,CAAwB,IAAxB,EAA6B,IAA7B;;UACA,KAAK,aAAL,CAAmB,MAAnB,CAA0B,IAA1B;;UAIA,IAAI,IAAI,CAAC,UAAT,EACE;YAAA,IAAE,CAAG,WAAW,CAAC,eAAZ,CAA4B,GAA5B,CAAgC,IAAI,CAAC,UAAL,CAAgB,GAAhD,CAAL,EACE,WAAW,CAAC,eAAZ,CAA4B,GAA5B,CAAgC,IAAI,CAAC,UAAL,CAAgB,GAAhD,EAAqD,IAAI,CAAC,UAA1D;UACD;QAEJ;MAfH;IAiBD;;;;;;SDzpCa,yC,CAA4C,I,EAA4D;EACtH,uBAAsC,eAAQ,CAAM,EAAN,CAA9C;EAAA;EAAA,IAAK,YAAL;EAAA,IAAmB,eAAnB;;EACA,wBAAoC,eAAQ,CAAC,IAAI,yCAAJ,EAAD,CAA5C;EAAA;EAAA,IAAK,WAAL;EAAA,IAAkB,cAAlB;;EACA,wBAAkC,eAAQ,CAAC,KAAD,CAA1C;EAAA;EAAA,IAAK,WAAL;EAAA,IAAkB,YAAlB;;EACA,wBAAkC,eAAQ,CAAC,KAAD,CAA1C;EAAA;EAAA,IAAK,WAAL;EAAA,IAAkB,YAAlB;;EACA,IAAI,WAAW,GAAG,cAAO,CAAA;IAAA,OAAO,IAAI,yCAAJ,EAAP;EAAA,CAAA,EAAmC,EAAnC,CAAzB;EAEA,WAAW,CAAC,QAAZ,GAAuB;qBACrB,eADqB;IAErB,cAFqB,0BAEN,IAFM,EAEA;MACnB,WAAW,CAAC,WAAZ,GAA0B,IAA1B;MACA,IAAI,CAAC,mBAAL,CAAyB,IAAzB;IACD,CALoB;oBAMrB,cANqB;IAOrB,UAAU,EAAE,IAAI,CAAC,UAPI;IAQrB,aAAa,EAAE,IAAI,CAAC,aARC;IASrB,eAAe,EAAA;MAAA,OAAQ,YAAY,CAAC,IAAD,CAApB;IAAA,CATM;IAUrB,aAAa,EAAA;MAAA,OAAQ,YAAY,CAAC,KAAD,CAApB;IAAA,CAVQ;IAWrB,eAAe,EAAE,IAAI,CAAC;EAXD,CAAvB;EAcA,WAAW,CAAC,MAAZ,GAAqB,IAAI,CAAC,MAA1B;EACA,WAAW,CAAC,UAAZ,GAAyB,IAAI,CAAC,UAA9B;EACA,WAAW,CAAC,kBAAZ,GAAiC,IAAI,CAAC,kBAAtC;EAEA,sBAAe,CAAA,YAAO;IACpB,WAAW,CAAC,WAAZ;EACD,CAFc,CAAf;EAKA,gBAAS,CAAA,YAAO;IACd,OAAM;MAAA,OAAO,WAAW,CAAC,WAAZ,EAAP;IAAA,CAAN;EACD,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAO;iBACL,WADK;kBAEL,YAFK;IAGL,cAAc,EAAE,kBAAW,CAAA,UAAE,IAAF,EAAW;MACpC,WAAW,CAAC,WAAZ,GAA0B,IAA1B;IACD,CAF0B,EAExB,CAAC,WAAD,CAFwB,CAHtB;iBAML,WANK;iBAOL,WAPK;iBAQL,WARK;IASL,cAAc,EAAE,kBAAW,CAAA,YAAO;MAChC,WAAW,CAAC,cAAZ;MACA,YAAY,CAAC,IAAD,CAAZ;IACD,CAH0B,EAGxB,CAAC,WAAD,CAHwB,CATtB;IAaL,YAAY,EAAE,kBAAW,CAAA,YAAO;MAC9B,WAAW,CAAC,YAAZ;MACA,YAAY,CAAC,KAAD,CAAZ;IACD,CAHwB,EAGtB,CAAC,WAAD,CAHsB;EAbpB,CAAP;AAkBD","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {InvalidationContext} from './types';\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\n// import {Point} from './Point';\nimport {Rect} from './Rect';\nimport {Size} from './Size';\nimport {Virtualizer} from './Virtualizer';\n// import { DragTarget, DropTarget } from '@react-types/shared';\n\n/**\n * [CollectionView]{@link CollectionView} supports arbitrary layout objects, which compute what views are visible, and how\n * to position and style them. However, layouts do not create the views themselves directly. Instead,\n * layouts produce lightweight {@link LayoutInfo} objects which describe various properties of a view,\n * such as its position and size. The {@link CollectionView} is then responsible for creating the actual\n * views as needed, based on this layout information.\n *\n * Every layout extends from the {@link Layout} abstract base class. Layouts must implement a minimum of the\n * two methods listed below. All other methods can be optionally overridden to implement custom behavior.\n *\n * @see {@link getVisibleLayoutInfos}\n * @see {@link getLayoutInfo}\n */\nexport abstract class Layout<T extends object> {\n  /** The CollectionView the layout is currently attached to. */\n  virtualizer: Virtualizer<T, any, any>;\n\n  /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    // By default, invalidate when the size changes\n    return newRect.width !== oldRect.width\n        || newRect.height !== oldRect.height;\n  }\n\n  /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */\n  validate(invalidationContext: InvalidationContext<T, any>) {} // eslint-disable-line @typescript-eslint/no-unused-vars\n\n  /**\n   * Returns an array of {@link LayoutInfo} objects which are inside the given rectangle.\n   * Should be implemented by subclasses.\n   * @param rect The rectangle that should contain the returned LayoutInfo objects.\n   */\n  abstract getVisibleLayoutInfos(rect: Rect): LayoutInfo[];\n\n  /**\n   * Returns a {@link LayoutInfo} for the given key.\n   * Should be implemented by subclasses.\n   * @param key The key of the LayoutInfo to retrieve.\n   */\n  abstract getLayoutInfo(key: Key): LayoutInfo;\n\n  /**\n   * Returns size of the content. By default, it returns collectionView's size.\n   */\n  abstract getContentSize(): Size;\n\n  /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */\n  // getDragTarget(point: Point): DragTarget | null {\n  //   let target = this.virtualizer.keyAtPoint(point);\n  //   if (!target) {\n  //     return null;\n  //   }\n\n  //   return {\n  //     type: 'item',\n  //     key: target\n  //   };\n  // }\n\n  /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */\n  // getDropTarget(point: Point): DropTarget | null {\n  //   return null;\n  // }\n\n  /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */\n  getInitialLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n\n  /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */\n  getFinalLayoutInfo(layoutInfo: LayoutInfo): LayoutInfo {\n    return layoutInfo;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {Rect} from './Rect';\n\n/**\n * Instances of this lightweight class are created by {@link Layout} subclasses\n * to represent each view in the {@link CollectionView}. LayoutInfo objects describe\n * various properties of a view, such as its position and size, and style information.\n * The collection view uses this information when creating actual views to display.\n */\nexport class LayoutInfo {\n  /**\n   * A string representing the view type. Should be `'item'` for item views.\n   * Other types are used by supplementary views.\n   */\n  type: string;\n\n  /**\n   * A unique key for this view. For item views, it should match the content key.\n   */\n  key: Key;\n\n  /**\n   * The key for a parent layout info, if any.\n   */\n  parentKey: Key | null;\n\n  /**\n   * The rectangle describing the size and position of this view.\n   */\n  rect: Rect;\n\n  /**\n   * Whether the size is estimated. `false` by default.\n   */\n  estimatedSize: boolean;\n\n  /**\n   * Whether the layout info sticks to the viewport when scrolling.\n   */\n  isSticky: boolean;\n\n  /**\n   * The view's opacity. 1 by default.\n   */\n  opacity: number;\n\n  /**\n   * A CSS transform string to apply to the view. `null` by default.\n   */\n  transform: string | null;\n\n  /**\n   * The z-index of the view. 0 by default.\n   */\n  zIndex: number;\n\n  /**\n   * Whether the layout info allows its contents to overflow its container.\n   * @default false\n   */\n  allowOverflow: boolean;\n\n  /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */\n  constructor(type: string, key: Key, rect: Rect) {\n    this.type = type;\n    this.key = key;\n    this.parentKey = null;\n    this.rect = rect;\n    this.estimatedSize = false;\n    this.isSticky = false;\n    this.opacity = 1;\n    this.transform = null;\n    this.zIndex = 0;\n    this.allowOverflow = false;\n  }\n\n  /**\n   * Returns a copy of the LayoutInfo.\n   */\n  copy(): LayoutInfo {\n    let res = new LayoutInfo(this.type, this.key, this.rect.copy());\n    res.estimatedSize = this.estimatedSize;\n    res.opacity = this.opacity;\n    res.transform = this.transform;\n    res.parentKey = this.parentKey;\n    res.isSticky = this.isSticky;\n    res.zIndex = this.zIndex;\n    res.allowOverflow = this.allowOverflow;\n    return res;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Point {\n  /** The x-coordinate of the point. */\n  x: number;\n\n  /** The y-coordinate of the point. */\n  y: number;\n\n  constructor(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /**\n   * Returns a copy of this point.\n   */\n  copy(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * Checks if two points are equal.\n   */\n  equals(point: Point): boolean {\n    return this.x === point.x && this.y === point.y;\n  }\n\n  /**\n   * Returns true if this point is the origin.\n   */\n  isOrigin(): boolean {\n    return this.x === 0 && this.y === 0;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Size} from './Size';\n\nexport type RectCorner = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n * Represents a rectangle.\n */\nexport class Rect {\n  /** The x-coordinate of the rectangle. */\n  x: number;\n\n  /** The y-coordinate of the rectangle. */\n  y: number;\n\n  /** The width of the rectangle. */\n  width: number;\n\n  /** The height of the rectangle. */\n  height: number;\n\n  constructor(x = 0, y = 0, width = 0, height = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The maximum x-coordinate in the rectangle.\n   */\n  get maxX(): number {\n    return this.x + this.width;\n  }\n\n  /**\n   * The maximum y-coordinate in the rectangle.\n   */\n  get maxY(): number {\n    return this.y + this.height;\n  }\n\n  /**\n   * The area of the rectangle.\n   */\n  get area(): number {\n    return this.width * this.height;\n  }\n\n  /**\n   * The top left corner of the rectangle.\n   */\n  get topLeft(): Point {\n    return new Point(this.x, this.y);\n  }\n\n  /**\n   * The top right corner of the rectangle.\n   */\n  get topRight(): Point {\n    return new Point(this.maxX, this.y);\n  }\n\n  /**\n   * The bottom left corner of the rectangle.\n   */\n  get bottomLeft(): Point {\n    return new Point(this.x, this.maxY);\n  }\n\n  /**\n   * The bottom right corner of the rectangle.\n   */\n  get bottomRight(): Point {\n    return new Point(this.maxX, this.maxY);\n  }\n\n  /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  intersects(rect: Rect): boolean {\n    return this.x <= rect.x + rect.width\n        && rect.x <= this.x + this.width\n        && this.y <= rect.y + rect.height\n        && rect.y <= this.y + this.height;\n  }\n\n  /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */\n  containsRect(rect: Rect): boolean {\n    return this.x <= rect.x\n        && this.y <= rect.y\n        && this.maxX >= rect.maxX\n        && this.maxY >= rect.maxY;\n  }\n\n  /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */\n  containsPoint(point: Point): boolean {\n    return this.x <= point.x\n        && this.y <= point.y\n        && this.maxX >= point.x\n        && this.maxY >= point.y;\n  }\n\n  /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */\n  getCornerInRect(rect: Rect): RectCorner | null {\n    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {\n      if (rect.containsPoint(this[key])) {\n        return key as RectCorner;\n      }\n    }\n\n    return null;\n  }\n\n  equals(rect: Rect) {\n    return rect.x === this.x\n        && rect.y === this.y\n        && rect.width === this.width\n        && rect.height === this.height;\n  }\n\n  pointEquals(point: Point | Rect) {\n    return this.x === point.x\n        && this.y === point.y;\n  }\n\n  sizeEquals(size: Size | Rect) {\n    return this.width === size.width\n        && this.height === size.height;\n  }\n\n  /**\n   * Returns a copy of this rectangle.\n   */\n  copy(): Rect {\n    return new Rect(this.x, this.y, this.width, this.height);\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport class Size {\n  width: number;\n  height: number;\n\n  constructor(width = 0, height = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Returns a copy of this size.\n   */\n  copy(): Size {\n    return new Size(this.width, this.height);\n  }\n\n  /**\n   * Returns whether this size is equal to another one.\n   */\n  equals(other: Size): boolean {\n    return this.width === other.width\n        && this.height === other.height;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {Virtualizer} from './Virtualizer';\n\nlet KEY = 0;\n\n/**\n * [CollectionView]{@link CollectionView} creates instances of the [ReusableView]{@link ReusableView} class to\n * represent views currently being displayed. ReusableViews manage a DOM node, handle\n * applying {@link LayoutInfo} objects to the view, and render content\n * as needed. Subclasses must implement the {@link render} method at a\n * minimum. Other methods can be overridden to customize behavior.\n */\nexport class ReusableView<T extends object, V> {\n  /** The CollectionVirtualizer this view is a part of. */\n  virtualizer: Virtualizer<T, V, unknown>;\n\n  /** The LayoutInfo this view is currently representing. */\n  layoutInfo: LayoutInfo | null;\n\n  /** The content currently being displayed by this view, set by the collection view. */\n  content: T;\n\n  rendered: V;\n\n  viewType: string;\n  key: Key;\n\n  constructor(virtualizer: Virtualizer<T, V, unknown>) {\n    this.virtualizer = virtualizer;\n    this.key = ++KEY;\n  }\n\n  /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */\n  prepareForReuse() {\n    this.content = null;\n    this.rendered = null;\n    this.layoutInfo = null;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection} from '@react-types/shared';\nimport {Key, useCallback, useEffect, useMemo, useState} from 'react';\nimport {Layout} from './Layout';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {useLayoutEffect} from '@react-aria/utils';\nimport {Virtualizer} from './Virtualizer';\n\ninterface VirtualizerProps<T extends object, V, W> {\n  renderView(type: string, content: T): V,\n  renderWrapper(\n    parent: ReusableView<T, V> | null,\n    reusableView: ReusableView<T, V>,\n    children: ReusableView<T, V>[],\n    renderChildren: (views: ReusableView<T, V>[]) => W[]\n  ): W,\n  layout: Layout<T>,\n  collection: Collection<T>,\n  onVisibleRectChange(rect: Rect): void,\n  getScrollAnchor?(rect: Rect): Key,\n  transitionDuration?: number\n}\n\nexport interface VirtualizerState<T extends object, V, W> {\n  visibleViews: W[],\n  setVisibleRect: (rect: Rect) => void,\n  contentSize: Size,\n  isAnimating: boolean,\n  virtualizer: Virtualizer<T, V, W>,\n  isScrolling: boolean,\n  startScrolling: () => void,\n  endScrolling: () => void\n}\n\nexport function useVirtualizerState<T extends object, V, W>(opts: VirtualizerProps<T, V, W>): VirtualizerState<T, V, W> {\n  let [visibleViews, setVisibleViews] = useState<W[]>([]);\n  let [contentSize, setContentSize] = useState(new Size());\n  let [isAnimating, setAnimating] = useState(false);\n  let [isScrolling, setScrolling] = useState(false);\n  let virtualizer = useMemo(() => new Virtualizer<T, V, W>(), []);\n\n  virtualizer.delegate = {\n    setVisibleViews,\n    setVisibleRect(rect) {\n      virtualizer.visibleRect = rect;\n      opts.onVisibleRectChange(rect);\n    },\n    setContentSize,\n    renderView: opts.renderView,\n    renderWrapper: opts.renderWrapper,\n    beginAnimations: () => setAnimating(true),\n    endAnimations: () => setAnimating(false),\n    getScrollAnchor: opts.getScrollAnchor\n  };\n\n  virtualizer.layout = opts.layout;\n  virtualizer.collection = opts.collection;\n  virtualizer.transitionDuration = opts.transitionDuration;\n\n  useLayoutEffect(() => {\n    virtualizer.afterRender();\n  });\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => virtualizer.willUnmount();\n  }, []);\n\n  return {\n    virtualizer,\n    visibleViews,\n    setVisibleRect: useCallback((rect) => {\n      virtualizer.visibleRect = rect;\n    }, [virtualizer]),\n    contentSize,\n    isAnimating,\n    isScrolling,\n    startScrolling: useCallback(() => {\n      virtualizer.startScrolling();\n      setScrolling(true);\n    }, [virtualizer]),\n    endScrolling: useCallback(() => {\n      virtualizer.endScrolling();\n      setScrolling(false);\n    }, [virtualizer])\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CancelablePromise, easeOut, tween} from './tween';\nimport {Collection} from '@react-types/shared';\nimport {concatIterators, difference, isSetEqual} from './utils';\nimport {\n  InvalidationContext,\n  ScrollAnchor,\n  ScrollToItemOptions,\n  VirtualizerDelegate,\n  VirtualizerOptions\n} from './types';\nimport {Key} from 'react';\nimport {Layout} from './Layout';\nimport {LayoutInfo} from './LayoutInfo';\nimport {OverscanManager} from './OverscanManager';\nimport {Point} from './Point';\nimport {Rect} from './Rect';\nimport {ReusableView} from './ReusableView';\nimport {Size} from './Size';\nimport {Transaction} from './Transaction';\n\n/**\n * The CollectionView class renders a scrollable collection of data using customizable layouts,\n * and manages animated updates to the data over time. It supports very large collections by\n * only rendering visible views to the DOM, reusing them as you scroll. Collection views can\n * present any type of view, including non-item views such as section headers and footers.\n * Optionally, the {@link EditableCollectionView} subclass can be used to enable user interaction\n * with the collection, including drag and drop, multiple selection, and keyboard interacton.\n *\n * Collection views get their data from a {@link DataSource} object that you provide. Items are\n * grouped into sections by the data source, and the collection view calls its methods to retrieve\n * the data. When data changes, the data source emits change events, and the collection view\n * updates as appropriate, optionally with an animated transition. There is one built-in data source\n * implementation, {@link ArrayDataSource}, which renders content from a 2d array.\n *\n * Collection views use {@link Layout} objects to compute what views should be visible, and how\n * to position and style them. This means that collection views can have their items arranged in\n * a stack, a grid, a circle, or any other layout you can think of. The layout can be changed\n * dynamically at runtime as well, optionally with an animated transition between the layouts.\n *\n * Layouts produce information on what views should appear in the collection view, but do not create\n * the views themselves directly. It is the responsibility of the {@link CollectionViewDelegate} object\n * to create instances of {@link ReusableView} subclasses which render the items into DOM nodes.\n * The delegate determines what type of view to display for each item, and creates instances of\n * views as needed by the collection view. Those views are then reused by the collection view as\n * the user scrolls through the content.\n */\nexport class Virtualizer<T extends object, V, W> {\n  /**\n   * The collection view delegate. The delegate is used by the collection view\n   * to create and configure views.\n   */\n  delegate: VirtualizerDelegate<T, V, W>;\n\n  /** The duration of animated layout changes, in milliseconds. Default is 500ms. */\n  transitionDuration: number;\n\n  /**\n   * Whether to enable scroll anchoring. This will attempt to restore the scroll position\n   * after layout changes outside the viewport. Default is off.\n   */\n  anchorScrollPosition: boolean;\n\n  /** Whether to anchor the scroll position when at the top of the content. Default is off. */\n  anchorScrollPositionAtTop: boolean;\n\n  /**\n   * Whether to overscan the visible area to pre-render items slightly outside and\n   * improve performance. Default is on.\n   */\n  shouldOverscan: boolean;\n\n  private _collection: Collection<T>;\n  private _layout: Layout<T>;\n  private _contentSize: Size;\n  private _visibleRect: Rect;\n  private _visibleLayoutInfos: Map<Key, LayoutInfo>;\n  private _reusableViews: {[type: string]: ReusableView<T, V>[]};\n  private _visibleViews: Map<Key, ReusableView<T, V>>;\n  private _renderedContent: WeakMap<T, V>;\n  private _children: Set<ReusableView<T, V>>;\n  private _invalidationContext: InvalidationContext<T, V> | null;\n  private _overscanManager: OverscanManager;\n  private _persistedKeys: Set<Key>;\n  private _relayoutRaf: number | null;\n  private _scrollAnimation: CancelablePromise<void> | null;\n  private _isScrolling: boolean;\n  private _sizeUpdateQueue: Map<Key, Size>;\n  private _animatedContentOffset: Point;\n  private _transaction: Transaction<T, V> | null;\n  private _nextTransaction: Transaction<T, V> | null;\n  private _transactionQueue: Transaction<T, V>[];\n\n  constructor(options: VirtualizerOptions<T, V, W> = {}) {\n    this._contentSize = new Size;\n    this._visibleRect = new Rect;\n\n    this._reusableViews = {};\n    this._visibleLayoutInfos = new Map();\n    this._visibleViews = new Map();\n    this._renderedContent = new WeakMap();\n    this._children = new Set();\n    this._invalidationContext = null;\n    this._overscanManager = new OverscanManager();\n    this._persistedKeys = new Set();\n\n    this._scrollAnimation = null;\n    this._isScrolling = false;\n    this._sizeUpdateQueue = new Map();\n    this._animatedContentOffset = new Point(0, 0);\n\n    this._transaction = null;\n    this._nextTransaction = null;\n    this._transactionQueue = [];\n\n    // Set options from passed object if given\n    this.transitionDuration = options.transitionDuration ?? 500;\n    this.anchorScrollPosition = options.anchorScrollPosition || false;\n    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n    this.shouldOverscan = options.shouldOverscan !== false;\n    for (let key of ['delegate', 'size', 'layout', 'collection']) {\n      if (options[key]) {\n        this[key] = options[key];\n      }\n    }\n  }\n\n  _setContentSize(size: Size) {\n    this._contentSize = size;\n    this.delegate.setContentSize(size);\n  }\n\n  _setContentOffset(offset: Point) {\n    let rect = new Rect(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n    this.delegate.setVisibleRect(rect);\n  }\n\n  /**\n   * Get the size of the scrollable content.\n   */\n  get contentSize(): Size {\n    return this._contentSize;\n  }\n\n  /**\n   * Get the collection view's currently visible rectangle.\n   */\n  get visibleRect(): Rect {\n    return this._visibleRect;\n  }\n\n  /**\n   * Set the collection view's currently visible rectangle.\n   */\n  set visibleRect(rect: Rect) {\n    this._setVisibleRect(rect);\n  }\n\n  _setVisibleRect(rect: Rect, forceUpdate = false) {\n    let current = this._visibleRect;\n\n    // Ignore if the rects are equal\n    if (rect.equals(current)) {\n      return;\n    }\n\n    if (this.shouldOverscan) {\n      this._overscanManager.setVisibleRect(rect);\n    }\n\n    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n\n    this._resetAnimatedContentOffset();\n    this._visibleRect = rect;\n\n    if (shouldInvalidate) {\n      this.relayout({\n        offsetChanged: !rect.pointEquals(current),\n        sizeChanged: !rect.sizeEquals(current)\n      });\n    } else {\n      this.updateSubviews(forceUpdate);\n    }\n  }\n\n  get collection(): Collection<T> {\n    return this._collection;\n  }\n\n  set collection(data: Collection<T>) {\n    this._setData(data);\n  }\n\n  private _setData(data: Collection<T>) {\n    if (data === this._collection) {\n      return;\n    }\n\n    if (this._collection) {\n      this._runTransaction(() => {\n        this._collection = data;\n      }, this.transitionDuration > 0);\n    } else {\n      this._collection = data;\n      this.reloadData();\n    }\n  }\n\n  /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */\n  reloadData() {\n    this.relayout({\n      contentChanged: true\n    });\n  }\n\n  /**\n   * Returns the item with the given key.\n   */\n  getItem(key: Key) {\n    return this._collection ? this._collection.getItem(key) : null;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  get persistedKeys(): Set<Key> {\n    return this._persistedKeys;\n  }\n\n  /** The set of persisted keys are always present in the DOM, even if not currently in view. */\n  set persistedKeys(persistedKeys: Set<Key>) {\n    if (!isSetEqual(persistedKeys, this._persistedKeys)) {\n      this._persistedKeys = persistedKeys;\n      this.updateSubviews();\n    }\n  }\n\n  /** Returns whether the given key, or an ancestor, is persisted. */\n  isPersistedKey(key: Key) {\n    // Quick check if the key is directly in the set of persisted keys.\n    if (this._persistedKeys.has(key)) {\n      return true;\n    }\n\n    // If not, check if the key is an ancestor of any of the persisted keys.\n    for (let k of this._persistedKeys) {\n      while (k != null) {\n        let layoutInfo = this.layout.getLayoutInfo(k);\n        if (!layoutInfo) {\n          break;\n        }\n\n        k = layoutInfo.parentKey;\n\n        if (k === key) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the collection view's layout.\n   */\n  get layout(): Layout<T> {\n    return this._layout;\n  }\n\n  /**\n   * Set the collection view's layout.\n   */\n  set layout(layout: Layout<T>) {\n    this.setLayout(layout);\n  }\n\n  /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */\n  setLayout(layout: Layout<T>, animated = false) {\n    if (layout === this._layout) {\n      return;\n    }\n\n    let applyLayout = () => {\n      if (this._layout) {\n        // @ts-ignore\n        this._layout.virtualizer = null;\n      }\n\n      layout.virtualizer = this;\n      this._layout = layout;\n    };\n\n    if (animated) {\n      // Animated layout transitions are really simple, thanks to our transaction support.\n      // We just set the layout inside a transaction action, which runs after the initial\n      // layout infos for the animation are retrieved from the previous layout. Then, the\n      // final layout infos are retrieved from the new layout, and animations occur.\n      this._runTransaction(applyLayout);\n    } else {\n      applyLayout();\n      this.relayout();\n    }\n  }\n\n  private _getReuseType(layoutInfo: LayoutInfo, content: T | null) {\n    if (layoutInfo.type === 'item' && content) {\n      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n      return {type, reuseType};\n    }\n\n    return {\n      type: layoutInfo.type,\n      reuseType: layoutInfo.type\n    };\n  }\n\n  getReusableView(layoutInfo: LayoutInfo): ReusableView<T, V> {\n    let content = this.getItem(layoutInfo.key);\n    let {reuseType} = this._getReuseType(layoutInfo, content);\n\n    if (!this._reusableViews[reuseType]) {\n      this._reusableViews[reuseType] = [];\n    }\n\n    let reusable = this._reusableViews[reuseType];\n    let view = reusable.length > 0\n      ? reusable.pop()\n      : new ReusableView<T, V>(this);\n\n    view.viewType = reuseType;\n\n    if (!this._animatedContentOffset.isOrigin()) {\n      layoutInfo = layoutInfo.copy();\n      layoutInfo.rect.x += this._animatedContentOffset.x;\n      layoutInfo.rect.y += this._animatedContentOffset.y;\n    }\n\n    view.layoutInfo = layoutInfo;\n\n    this._renderView(view);\n    return view;\n  }\n\n  private _renderView(reusableView: ReusableView<T, V>) {\n    let {type, key} = reusableView.layoutInfo;\n    reusableView.content = this.getItem(key);\n    reusableView.rendered = this._renderContent(type, reusableView.content);\n  }\n\n  private _renderContent(type: string, content: T) {\n    let cached = this._renderedContent.get(content);\n    if (cached != null) {\n      return cached;\n    }\n\n    let rendered = this.delegate.renderView(type, content);\n    if (content) {\n      this._renderedContent.set(content, rendered);\n    }\n    return rendered;\n  }\n\n  /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */\n  get visibleViews(): ReusableView<T, V>[] {\n    return Array.from(this._visibleViews.values());\n  }\n\n  /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */\n  getView(key: Key): ReusableView<T, V> | null {\n    return this._visibleViews.get(key) || null;\n  }\n\n  /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */\n  getViewsOfType(type: string): ReusableView<T, V>[] {\n    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);\n  }\n\n  /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */\n  keyForView(view: ReusableView<T, V>): Key | null {\n    if (view && view.layoutInfo) {\n      return view.layoutInfo.key;\n    }\n\n    return null;\n  }\n\n  /**\n   * Returns the key for the item view currently at the given point.\n   */\n  keyAtPoint(point: Point): Key | null {\n    let rect = new Rect(point.x, point.y, 1, 1);\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n\n    // Layout may return multiple layout infos in the case of\n    // persisted keys, so find the first one that actually intersects.\n    for (let layoutInfo of layoutInfos) {\n      if (layoutInfo.rect.intersects(rect)) {\n        return layoutInfo.key;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */\n  willUnmount() {\n    cancelAnimationFrame(this._relayoutRaf);\n  }\n\n  /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */\n  relayout(context: InvalidationContext<T, V> = {}) {\n    // Ignore relayouts while animating the scroll position\n    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    // If we already scheduled a relayout, extend the invalidation\n    // context so we coalesce multiple relayouts in the same frame.\n    if (this._invalidationContext) {\n      Object.assign(this._invalidationContext, context);\n      return;\n    }\n\n    this._invalidationContext = context;\n    this._relayoutRaf = requestAnimationFrame(() => {\n      this._relayoutRaf = null;\n      this.relayoutNow();\n    });\n  }\n\n  /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */\n  relayoutNow(context: InvalidationContext<T, V> = this._invalidationContext || {}) {\n    // Cancel the scheduled relayout, since we're doing it now.\n    if (this._relayoutRaf) {\n      cancelAnimationFrame(this._relayoutRaf);\n      this._relayoutRaf = null;\n      // Update the provided context with the current invalidationContext since we are cancelling\n      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n      context = {...this._invalidationContext, ...context};\n    }\n\n    // Reset the invalidation context\n    this._invalidationContext = null;\n\n    // Do nothing if we don't have a layout or content, or we are\n    // in the middle of an animated scroll transition.\n    if (!this.layout || !this._collection || this._scrollAnimation) {\n      return;\n    }\n\n    let scrollAnchor = this._getScrollAnchor();\n\n    // Trigger the beforeLayout hook, if provided\n    if (typeof context.beforeLayout === 'function') {\n      context.beforeLayout();\n    }\n\n    // Validate the layout\n    this.layout.validate(context);\n    this._setContentSize(this.layout.getContentSize());\n\n    // Trigger the afterLayout hook, if provided\n    if (typeof context.afterLayout === 'function') {\n      context.afterLayout();\n    }\n\n    // Adjust scroll position based on scroll anchor, and constrain.\n    // If the content changed, scroll to the top.\n    let visibleRect = this.getVisibleRect();\n    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n\n    let hasLayoutUpdates = false;\n    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n      // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n      // Save the difference between the current and new content offsets, and apply it to the\n      // individual content items instead. At the end of the animation, we'll reset and set the\n      // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n      // the scroll animation and the content animation.\n      if (context.animated || !this._animatedContentOffset.isOrigin()) {\n        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n        hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n      } else {\n        this._setContentOffset(new Point(contentOffsetX, contentOffsetY));\n      }\n    } else {\n      hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n    }\n\n    // Apply layout infos, unless this is coming from an animated transaction\n    if (!(context.transaction && context.animated)) {\n      this._applyLayoutInfos();\n    }\n\n    // Wait for animations, and apply the afterAnimation hook, if provided\n    if (context.animated && hasLayoutUpdates) {\n      this._enableTransitions();\n\n      let done = () => {\n        this._disableTransitions();\n\n        // Reset scroll position after animations (see above comment).\n        if (!this._animatedContentOffset.isOrigin()) {\n          // Get the content offset to scroll to, taking _animatedContentOffset into account.\n          let {x, y} = this.getVisibleRect();\n          this._resetAnimatedContentOffset();\n          this._setContentOffset(new Point(x, y));\n        }\n\n        if (typeof context.afterAnimation === 'function') {\n          context.afterAnimation();\n        }\n      };\n\n      // Sometimes the animation takes slightly longer than expected.\n      setTimeout(done, this.transitionDuration + 100);\n      return;\n    } else if (typeof context.afterAnimation === 'function') {\n      context.afterAnimation();\n    }\n  }\n\n  /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */\n  private _correctItemOrder() {\n    // Defer until after scrolling and animated transactions are complete\n    if (this._isScrolling || this._transaction) {\n      return;\n    }\n\n    for (let key of this._visibleLayoutInfos.keys()) {\n      let view = this._visibleViews.get(key);\n      this._children.delete(view);\n      this._children.add(view);\n    }\n  }\n\n  private _enableTransitions() {\n    this.delegate.beginAnimations();\n  }\n\n  private _disableTransitions() {\n    this.delegate.endAnimations();\n  }\n\n  private _getScrollAnchor(): ScrollAnchor | null {\n    if (!this.anchorScrollPosition) {\n      return null;\n    }\n\n    let visibleRect = this.getVisibleRect();\n\n    // Ask the delegate to provide a scroll anchor, if possible\n    if (this.delegate.getScrollAnchor) {\n      let key = this.delegate.getScrollAnchor(visibleRect);\n      if (key != null) {\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n        if (corner) {\n          let key = layoutInfo.key;\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          return {key, layoutInfo, corner, offset};\n        }\n      }\n    }\n\n    // No need to anchor the scroll position if it is at the top\n    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) {\n      return null;\n    }\n\n    // Find a view with a visible corner that has the smallest distance to the top of the collection view\n    let cornerAnchor: ScrollAnchor | null = null;\n\n    for (let [key, view] of this._visibleViews) {\n      let layoutInfo = view.layoutInfo;\n      if (layoutInfo && layoutInfo.rect.area > 0) {\n        let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n\n        if (corner) {\n          let offset = layoutInfo.rect[corner].y - visibleRect.y;\n          if (!cornerAnchor || (offset < cornerAnchor.offset)) {\n            cornerAnchor = {key, layoutInfo, corner, offset};\n          }\n        }\n      }\n    }\n\n    return cornerAnchor;\n  }\n\n  private _restoreScrollAnchor(scrollAnchor: ScrollAnchor | null, context: InvalidationContext<T, V>) {\n    let contentOffset = this.getVisibleRect();\n\n    if (scrollAnchor) {\n      let finalAnchor = context.transaction?.animated\n        ? context.transaction.finalMap.get(scrollAnchor.key)\n        : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n\n      if (finalAnchor) {\n        let adjustment = (finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y) - scrollAnchor.offset;\n        contentOffset.y += adjustment;\n      }\n    }\n\n    return contentOffset;\n  }\n\n  getVisibleRect(): Rect {\n    let v = this.visibleRect;\n    let x = v.x - this._animatedContentOffset.x;\n    let y = v.y - this._animatedContentOffset.y;\n    return new Rect(x, y, v.width, v.height);\n  }\n\n  getVisibleLayoutInfos() {\n    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n    return this._visibleLayoutInfos;\n  }\n\n  private _getLayoutInfoMap(rect: Rect, copy = false) {\n    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n    let map = new Map;\n\n    for (let layoutInfo of layoutInfos) {\n      if (copy) {\n        layoutInfo = layoutInfo.copy();\n      }\n\n      map.set(layoutInfo.key, layoutInfo);\n    }\n\n    return map;\n  }\n\n  updateSubviews(forceUpdate = false) {\n    if (!this._collection) {\n      return;\n    }\n\n    let visibleLayoutInfos = this.getVisibleLayoutInfos();\n    let currentlyVisible = this._visibleViews;\n    let toAdd, toRemove, toUpdate;\n\n    // If this is a force update, remove and re-add all views.\n    // Otherwise, find and update the diff.\n    if (forceUpdate) {\n      toAdd = visibleLayoutInfos;\n      toRemove = currentlyVisible;\n      toUpdate = new Set();\n    } else {\n      ({toAdd, toRemove, toUpdate} = difference(currentlyVisible, visibleLayoutInfos));\n\n      for (let key of toUpdate) {\n        let view = currentlyVisible.get(key);\n        if (!view || !view.layoutInfo) {\n          continue;\n        }\n\n        let item = this.getItem(visibleLayoutInfos.get(key).key);\n        if (view.content === item) {\n          toUpdate.delete(key);\n        } else {\n          // If the view type changes, delete and recreate the view instead of updating\n          let {reuseType} = this._getReuseType(view.layoutInfo, item);\n          if (view.viewType !== reuseType) {\n            toUpdate.delete(key);\n            toAdd.add(key);\n            toRemove.add(key);\n          }\n        }\n      }\n\n      // We are done if the sets are equal\n      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n        if (this._transaction) {\n          this._applyLayoutInfos();\n        }\n\n        return;\n      }\n    }\n\n    // Track views that should be removed. They are not removed from\n    // the DOM immediately, since we may reuse and need to re-insert\n    // them back into the DOM anyway.\n    let removed = new Set<ReusableView<T, V>>();\n\n    for (let key of toRemove.keys()) {\n      let view = this._visibleViews.get(key);\n      if (view) {\n        removed.add(view);\n        this._visibleViews.delete(key);\n\n        // If we are in the middle of a transaction, wait until the end\n        // of the animations to remove the views from the DOM. Also means\n        // we can't reuse those views immediately.\n        if (this._transaction) {\n          this._transaction.toRemove.set(key, view);\n        } else {\n          this.reuseView(view);\n        }\n      }\n    }\n\n    for (let key of toAdd.keys()) {\n      let layoutInfo = visibleLayoutInfos.get(key);\n      let view: ReusableView<T, V> | void;\n\n      // If we're in a transaction, and a layout change happens\n      // during the animations such that a view that was going\n      // to be removed is now not, we don't create a new view\n      // since the old one is still in the DOM, marked as toRemove.\n      if (this._transaction) {\n        // if transaction, get initial layout attributes for the animation\n        if (this._transaction.initialLayoutInfo.has(key)) {\n          layoutInfo = this._transaction.initialLayoutInfo.get(key);\n        }\n\n        view = this._transaction.toRemove.get(key);\n        if (view) {\n          this._transaction.toRemove.delete(key);\n          this._applyLayoutInfo(view, layoutInfo);\n        }\n      }\n\n      if (!view) {\n        // Create or reuse a view for this row\n        view = this.getReusableView(layoutInfo);\n\n        // Add the view to the DOM if needed\n        if (!removed.has(view)) {\n          this._children.add(view);\n        }\n      }\n\n      this._visibleViews.set(key, view);\n      removed.delete(view);\n    }\n\n    for (let key of toUpdate) {\n      let view = currentlyVisible.get(key) as ReusableView<T, V>;\n      this._renderedContent.delete(key);\n      this._renderView(view);\n    }\n\n    // Remove the remaining rows to delete from the DOM\n    if (!this._transaction) {\n      this.removeViews(removed);\n    }\n\n    this._correctItemOrder();\n    this._flushVisibleViews();\n\n    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n    if (hasLayoutUpdates) {\n      requestAnimationFrame(() => {\n        // If we're in a transaction, apply animations to visible views\n        // and \"to be removed\" views, which animate off screen.\n        if (this._transaction) {\n          requestAnimationFrame(() => this._applyLayoutInfos());\n        }\n      });\n    }\n\n    return hasLayoutUpdates;\n  }\n\n  afterRender() {\n    if (this.shouldOverscan) {\n      this._overscanManager.collectMetrics();\n    }\n  }\n\n  private _flushVisibleViews() {\n    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n    // method to build the final tree.\n    let viewsByParentKey = new Map([[null, []]]);\n    for (let view of this._children) {\n      if (!viewsByParentKey.has(view.layoutInfo.parentKey)) {\n        viewsByParentKey.set(view.layoutInfo.parentKey, []);\n      }\n\n      viewsByParentKey.get(view.layoutInfo.parentKey).push(view);\n      if (!viewsByParentKey.has(view.layoutInfo.key)) {\n        viewsByParentKey.set(view.layoutInfo.key, []);\n      }\n    }\n\n    let buildTree = (parent: ReusableView<T, V>, views: ReusableView<T, V>[]): W[] => views.map(view => {\n      let children = viewsByParentKey.get(view.layoutInfo.key);\n      return this.delegate.renderWrapper(\n        parent,\n        view,\n        children,\n        (childViews) => buildTree(view, childViews)\n      );\n    });\n\n    let children = buildTree(null, viewsByParentKey.get(null));\n    this.delegate.setVisibleViews(children);\n  }\n\n  private _applyLayoutInfo(view: ReusableView<T, V>, layoutInfo: LayoutInfo) {\n    if (view.layoutInfo === layoutInfo) {\n      return false;\n    }\n\n    view.layoutInfo = layoutInfo;\n    return true;\n  }\n\n  private _applyLayoutInfos() {\n    let updated = false;\n\n    // Apply layout infos to visible views\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (cur) {\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    // Apply final layout infos for views that will be removed\n    if (this._transaction) {\n      for (let view of this._transaction.toRemove.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this.layout.getLayoutInfo(cur.key);\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n\n      for (let view of this._transaction.removed.values()) {\n        let cur = view.layoutInfo;\n        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n        if (this._applyLayoutInfo(view, layoutInfo)) {\n          updated = true;\n        }\n      }\n    }\n\n    if (updated) {\n      this._flushVisibleViews();\n    }\n  }\n\n  private _hasLayoutUpdates() {\n    if (!this._transaction) {\n      return false;\n    }\n\n    for (let view of this._visibleViews.values()) {\n      let cur = view.layoutInfo;\n      if (!cur) {\n        return true;\n      }\n\n      let layoutInfo = this.layout.getLayoutInfo(cur.key);\n      if (\n        // Uses equals rather than pointEquals so that width/height changes are taken into account\n        !cur.rect.equals(layoutInfo.rect) ||\n        cur.opacity !== layoutInfo.opacity ||\n        cur.transform !== layoutInfo.transform\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  reuseView(view: ReusableView<T, V>) {\n    view.prepareForReuse();\n    this._reusableViews[view.viewType].push(view);\n  }\n\n  removeViews(toRemove: Set<ReusableView<T, V>>) {\n    for (let view of toRemove) {\n      this._children.delete(view);\n    }\n  }\n\n  updateItemSize(key: Key, size: Size) {\n    // TODO: we should be able to invalidate a single index path\n    // @ts-ignore\n    if (!this.layout.updateItemSize) {\n      return;\n    }\n\n    // If the scroll position is currently animating, add the update\n    // to a queue to be processed after the animation is complete.\n    if (this._scrollAnimation) {\n      this._sizeUpdateQueue.set(key, size);\n      return;\n    }\n\n    // @ts-ignore\n    let changed = this.layout.updateItemSize(key, size);\n    if (changed) {\n      this.relayout();\n    }\n  }\n\n  startScrolling() {\n    this._isScrolling = true;\n  }\n\n  endScrolling() {\n    this._isScrolling = false;\n    this._correctItemOrder();\n    this._flushVisibleViews();\n  }\n\n  private _resetAnimatedContentOffset() {\n    // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n    if (!this._animatedContentOffset.isOrigin()) {\n      this._animatedContentOffset = new Point(0, 0);\n      this._applyLayoutInfos();\n    }\n  }\n\n  /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */\n  scrollToItem(key: Key, options?: ScrollToItemOptions) {\n    // key can be 0, so check if null or undefined\n    if (key == null) {\n      return;\n    }\n\n    let layoutInfo = this.layout.getLayoutInfo(key);\n    if (!layoutInfo) {\n      return;\n    }\n\n    let {\n      duration = 300,\n      shouldScrollX = true,\n      shouldScrollY = true,\n      offsetX = 0,\n      offsetY = 0\n    } = options;\n\n    let x = this.visibleRect.x;\n    let y = this.visibleRect.y;\n    let minX = layoutInfo.rect.x - offsetX;\n    let minY = layoutInfo.rect.y - offsetY;\n    let maxX = x + this.visibleRect.width;\n    let maxY = y + this.visibleRect.height;\n\n    if (shouldScrollX) {\n      if (minX <= x || maxX === 0) {\n        x = minX;\n      } else if (layoutInfo.rect.maxX > maxX) {\n        x += layoutInfo.rect.maxX - maxX;\n      }\n    }\n\n    if (shouldScrollY) {\n      if (minY <= y || maxY === 0) {\n        y = minY;\n      } else if (layoutInfo.rect.maxY > maxY) {\n        y += layoutInfo.rect.maxY - maxY;\n      }\n    }\n\n    return this.scrollTo(new Point(x, y), duration);\n  }\n\n  /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */\n  scrollTo(offset: Point, duration: number = 300): Promise<void> {\n    // Cancel the current scroll animation\n    if (this._scrollAnimation) {\n      this._scrollAnimation.cancel();\n      this._scrollAnimation = null;\n    }\n\n    // Set the content offset synchronously if the duration is zero\n    if (duration <= 0 || this.visibleRect.pointEquals(offset)) {\n      this._setContentOffset(offset);\n      return Promise.resolve();\n    }\n\n    this.startScrolling();\n\n    this._scrollAnimation = tween(this.visibleRect, offset, duration, easeOut, offset => {this._setContentOffset(offset);});\n    this._scrollAnimation.then(() => {\n      this._scrollAnimation = null;\n\n      // Process view size updates that occurred during the animation.\n      // Only views that are still visible will be actually updated.\n      for (let [key, size] of this._sizeUpdateQueue) {\n        this.updateItemSize(key, size);\n      }\n\n      this._sizeUpdateQueue.clear();\n      this.relayout();\n      this._processTransactionQueue();\n      this.endScrolling();\n    });\n\n    return this._scrollAnimation;\n  }\n\n  private _runTransaction(action: () => void, animated?: boolean) {\n    this._startTransaction();\n    if (this._nextTransaction) {\n      this._nextTransaction.actions.push(action);\n    }\n    this._endTransaction(animated);\n  }\n\n  private _startTransaction() {\n    if (!this._nextTransaction) {\n      this._nextTransaction = new Transaction;\n    }\n\n    this._nextTransaction.level++;\n  }\n\n  private _endTransaction(animated?: boolean) {\n    if (!this._nextTransaction) {\n      return false;\n    }\n\n    // Save whether the transaction should be animated.\n    if (animated != null) {\n      this._nextTransaction.animated = animated;\n    }\n\n    // If we haven't reached level 0, we are still in a\n    // nested transaction. Wait for the parent to end.\n    if (--this._nextTransaction.level > 0) {\n      return false;\n    }\n\n    // Do nothing for empty transactions\n    if (this._nextTransaction.actions.length === 0) {\n      this._nextTransaction = null;\n      return false;\n    }\n\n    // Default animations to true\n    if (this._nextTransaction.animated == null) {\n      this._nextTransaction.animated = true;\n    }\n\n    // Enqueue the transaction\n    this._transactionQueue.push(this._nextTransaction);\n    this._nextTransaction = null;\n\n    this._processTransactionQueue();\n    return true;\n  }\n\n  private _processTransactionQueue() {\n    // If the current transaction is animating, wait until the end\n    // to process the next transaction.\n    if (this._transaction || this._scrollAnimation) {\n      return;\n    }\n\n    let next = this._transactionQueue.shift();\n    if (next) {\n      this._performTransaction(next);\n    }\n  }\n\n  private _getContentRect(): Rect {\n    return new Rect(0, 0, this.contentSize.width, this.contentSize.height);\n  }\n\n  private _performTransaction(transaction: Transaction<T, V>) {\n    this._transaction = transaction;\n\n    this.relayoutNow({\n      transaction: transaction,\n      animated: transaction.animated,\n\n      beforeLayout: () => {\n        // Get the initial layout infos for all views before the updates\n        // so we can figure out which views to add and remove.\n        if (transaction.animated) {\n          transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n        }\n\n        // Apply the actions that occurred during this transaction\n        for (let action of transaction.actions) {\n          action();\n        }\n      },\n\n      afterLayout: () => {\n        // Get the final layout infos after the updates\n        if (transaction.animated) {\n          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n          this._setupTransactionAnimations(transaction);\n        } else {\n          this._transaction = null;\n        }\n      },\n\n      afterAnimation: () => {\n        // Remove and reuse views when animations are done\n        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) {\n          for (let view of concatIterators(transaction.toRemove.values(), transaction.removed.values())) {\n            this._children.delete(view);\n            this.reuseView(view);\n          }\n        }\n\n        this._transaction = null;\n\n        // Ensure DOM order is correct for accessibility after animations are complete\n        this._correctItemOrder();\n        this._flushVisibleViews();\n\n        this._processTransactionQueue();\n      }\n    });\n  }\n\n  private _setupTransactionAnimations(transaction: Transaction<T, V>) {\n    let {initialMap, finalMap} = transaction;\n\n    // Store initial and final layout infos for animations\n    for (let [key, layoutInfo] of initialMap) {\n      if (finalMap.has(key)) {\n        // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n      } else {\n        // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n      }\n    }\n\n    // Get initial layout infos for views that were added\n    for (let [key, layoutInfo] of finalMap) {\n      if (!initialMap.has(key)) {\n        let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo.copy());\n        transaction.initialLayoutInfo.set(key, initialLayoutInfo);\n      }\n    }\n\n    // Figure out which views were removed.\n    for (let [key, view] of this._visibleViews) {\n      // If an item has a width of 0, there is no need to remove it from the _visibleViews.\n      // Removing an item with  width of 0 can cause a loop where the item gets added, removed,\n      // added, removed... etc in a loop.\n      if (!finalMap.has(key) && view.layoutInfo.rect.width > 0) {\n        transaction.removed.set(key, view);\n        this._visibleViews.delete(key);\n\n        // In case something weird happened, where we have a view but no\n        // initial layout info, use the one attached to the view.\n        if (view.layoutInfo) {\n          if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) {\n            transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n          }\n        }\n      }\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\n\n// use high res timer if available\nlet perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet perfNow = perf && (perf.now || perf.webkitNow || perf.msNow || perf.mozNow);\nlet getTime = perfNow ? perfNow.bind(perf) : function () {\n  return Date.now ? Date.now() : new Date().getTime();\n};\n\nlet fixTs: boolean;\n\nexport interface CancelablePromise<T> extends Promise<T> {\n  cancel(): void\n}\n\nexport function tween(begin, end, duration, ease, fn): CancelablePromise<void> {\n  let canceled = false;\n  let raf_id: number;\n\n  let promise = new Promise(resolve => {\n    let start = getTime();\n    let diffX = end.x - begin.x;\n    let diffY = end.y - begin.y;\n\n    raf_id = requestAnimationFrame(function run(t) {\n      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n      if (fixTs == null) {\n        fixTs = t > 1e12 !== getTime() > 1e12;\n      }\n\n      if (fixTs) {\n        t = getTime();\n      }\n\n      // check if we're done\n      let delta = t - start;\n      if (delta > duration) {\n        fn(end);\n        resolve();\n      } else {\n        // call frame callback after computing eased time and get the next frame\n        let proceed = fn(new Point(\n          begin.x + diffX * ease(delta / duration),\n          begin.y + diffY * ease(delta / duration)\n        ));\n\n        if (proceed !== false && !canceled) {\n          raf_id = requestAnimationFrame(run);\n        }\n      }\n    });\n  }) as CancelablePromise<void>;\n\n  promise.cancel = function () {\n    canceled = true;\n    cancelAnimationFrame(raf_id);\n  };\n\n  return promise;\n}\n\n// easing functions\nexport function linearEasing(t) {\n  return t;\n}\n\nexport function easeOut(t) {\n  return Math.sin(t * Math.PI / 2);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport function keyDiff<T>(a: Map<T, any>, b: Map<T, any>): Set<T> {\n  let res = new Set<T>();\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n\n/**\n * Returns the key difference between two maps. Returns a set of\n * keys to add to and remove from a to make it equal to b.\n * @private\n */\nexport function difference<T>(a: Map<T, any>, b: Map<T, any>) {\n  let toRemove = keyDiff(a, b);\n  let toAdd = keyDiff(b, a);\n  let toUpdate = new Set;\n  for (let key of a.keys()) {\n    if (b.has(key)) {\n      toUpdate.add(key);\n    }\n  }\n  return {toRemove, toAdd, toUpdate};\n}\n\n/**\n * Returns an iterator that yields the items in all of the given iterators.\n * @private\n */\nexport function* concatIterators<T>(...iterators: Iterable<T>[]) {\n  for (let iterator of iterators) {\n    yield* iterator;\n  }\n}\n\n/**\n * Inverts the keys and values of an object.\n * @private\n */\nexport function invert(object) {\n  let res = {};\n  for (let key in object) {\n    res[object[key]] = key;\n  }\n\n  return res;\n}\n\n/** Returns whether two sets are equal. */\nexport function isSetEqual<T>(a: Set<T>, b: Set<T>): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (let key of a) {\n    if (!b.has(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Point} from './Point';\nimport {Rect} from './Rect';\n\nclass RollingAverage {\n  private count: number = 0;\n  value: number = 0;\n  \n  addSample(sample: number) {\n    this.count++;\n    this.value += (sample - this.value) / this.count;\n  }\n}\n\nexport class OverscanManager {\n  private startTime = 0;\n  private averagePerf = new RollingAverage();\n  private averageTime = new RollingAverage();\n  private velocity = new Point(5, 5);\n  private overscanX = new RollingAverage();\n  private overscanY = new RollingAverage();\n  private visibleRect = new Rect();\n  \n  setVisibleRect(rect: Rect) {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averageTime.addSample(time);\n\n      if (rect.x !== this.visibleRect.x && time > 0) {\n        this.velocity.x = (rect.x - this.visibleRect.x) / time;\n      }\n\n      if (rect.y !== this.visibleRect.y && time > 0) {\n        this.velocity.y = (rect.y - this.visibleRect.y) / time;\n      }\n    }\n\n    this.startTime = performance.now();\n    this.visibleRect = rect;\n  }\n\n  collectMetrics() {\n    let time = performance.now() - this.startTime;\n    if (time < 500) {\n      this.averagePerf.addSample(time);\n    }\n\n    if (this.visibleRect.height > 0) {\n      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanY.addSample(o);\n    }\n\n    if (this.visibleRect.width > 0) {\n      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));  \n      this.overscanX.addSample(o);\n    }\n  }\n\n  getOverscannedRect() {\n    let overscanned = this.visibleRect.copy();\n\n    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n    if (this.velocity.y > 0) {\n      overscanned.y -= overscanY * 0.2;\n      overscanned.height += overscanY + overscanY * 0.2;\n    } else {\n      overscanned.y -= overscanY;\n      overscanned.height += overscanY + overscanY * 0.2;\n    }\n\n    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n    if (this.velocity.x > 0) {\n      overscanned.x -= overscanX * 0.2;\n      overscanned.width += overscanX + overscanX * 0.2;\n    } else {\n      overscanned.x -= overscanX;\n      overscanned.width += overscanX + overscanX * 0.2;\n    }\n\n    return overscanned;\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {LayoutInfo} from './LayoutInfo';\nimport {ReusableView} from './ReusableView';\n\ntype LayoutInfoMap = Map<Key, LayoutInfo>;\nexport class Transaction<T extends object, V> {\n  level = 0;\n  actions: (() => void)[] = [];\n  animated = true;\n  initialMap: LayoutInfoMap = new Map();\n  finalMap: LayoutInfoMap = new Map();\n  initialLayoutInfo: LayoutInfoMap = new Map();\n  finalLayoutInfo: LayoutInfoMap = new Map();\n  removed: Map<Key, ReusableView<T, V>> = new Map();\n  toRemove: Map<Key, ReusableView<T, V>> = new Map();\n}\n"]},"metadata":{},"sourceType":"module"}